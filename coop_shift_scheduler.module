<?php

/**
 * @file
 *
 * The coop_shift_scheduler module.
 */

 require_once ( dirname(__FILE__) . '/committee.inc');
 
/**
 * Implements hook_help().
 */
function coop_shift_scheduler_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#coop_shift_scheduler":
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Displays the shift schedule managed by coop_shift_scheduler') . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_permission().
 */
function coop_shift_scheduler_permission() {
  return array(
	'access coop shift schedule' => array(
	  'title'         => t('Access coop shift schedule'),
	  'description'   => t('Enable to access on the coop shift schedule.'),	
	),
    'edit coop shift schedule' => array(
    	'title'       => t('Edit coop shift schedule'),
        'description' => t('Perform edit on coop shift schedule'),
    ),
    'administer coop_shift_scheduler' => array(
    	'title'       => t('Administer coop_shift_scheduler'),
        'description' => t('Perform administration tasks for shift schedule'),
    ),    
    'add to coop shift schedule' => array(
    	'title'       => t('Add to coop shift schedule'),
        'description' => t('Enable to add shift on schedule'),    	
    ),
  );
}

/**
 * Implements hook_init.
 * Calls drupal_add_css() so that coop_shift_scheduler.css is
 * appended to the top of each of the pages.
 */
function coop_shift_scheduler_init() {
//  if (drupal_is_front_page()){
    drupal_add_css(drupal_get_path('module', 'coop_shift_scheduler') . '/coop_shift_scheduler.css');
//  }
}

/**
 * Wraps string in a div tag specific to this module to make css work.
 */
function _coop_shift_scheduler_wrap_content($content) {
  return '<div id="shift-scheduler">' . $content . '</div>';
}

/**
 * Format the display of the shift schedule.
 * Only used as a callback in coop_shift_scheduler_menu().
 *
 * @see coop_shift_scheduler_menu()
 *
 * @todo use drupal calls to make the table
 */
function coop_shift_scheduler_schedule() {
  $page_content = '';
  $old_schedule_form = drupal_get_form('coop_shift_scheduler_old_schedule_form');
  $page_content .= drupal_render($old_schedule_form);
  $has_content = FALSE;
  // Get access to global variable representing the current user.
  global $user;
  // Handle claiming open shifts.
  if (isset($_GET['claim']) && isset($_GET['uid']) && ($_GET['uid'] == $user->uid) && isset($_GET['shift_id'])
          && variable_get('coop_shift_scheduler_claim_open_shifts', FALSE)
          && _coop_shift_scheduler_can_claim($user->uid, $_GET['shift_id'])){
		db_update('coop_shift_scheduler_shifts')
			->fields(array('uid' => (int) $user->uid))
			->condition('shift_id', (int) $_GET['shift_id'], '=')
			->execute();	
  }
  // Handle relinquishing shifts.
  elseif (isset($_GET['relinquish']) && isset($_GET['shift_id'])
              && variable_get('coop_shift_scheduler_relinquish_shifts', FALSE)) {
    $shift_info = db_query("SELECT uid FROM {coop_shift_scheduler_shifts} WHERE shift_id = :sid", array(':sid' => (int) $_GET['shift_id']))->fetchField();

    // Ensure that user is trying to relinquish his own shift.
    if ($shift_info == $user->uid) {
      //Set to open shift.
	  db_update('coop_shift_scheduler_shifts')
		->fields(array('uid' => NULL))
		->condition('shift_id', (int) $_GET['shift_id'], '=')
		->execute();      
    }
  }

  // Get start time.
  date_default_timezone_set(variable_get('date_default_timezone', date_default_timezone_get()));
  $today = getdate();
  // If specified in the URL, specify the time on which to start looking for
  // shifts.
  if (isset($_GET['sday']) && isset($_GET['smon']) && isset($_GET['syear'])) {
    $midnight = mktime(0, 0, 0, (int) $_GET['smon'], (int) $_GET['sday'], (int) $_GET['syear']);
  }
  // Otherwise, just start at yesterday.
  else {
    $midnight = mktime(0, 0, 0, $today['mon'], $today['mday'], $today['year']) - 60 * 60 * 24;
  }

  // Get end time.
  // If specified in the URL, specify the time on which to start looking for
  // shifts.
  if (isset($_GET['eday']) && isset($_GET['emon']) && isset($_GET['eyear'])) {
    $end_time = mktime(0, 0, 0, (int) $_GET['emon'], (int) $_GET['eday'] + 1, (int) $_GET['eyear']);
  }
  // If no end time specified, pick 10 years from today.
  else {
    $end_time = mktime(0, 0, 0, $today['mon'], $today['mday'], (int) $today['year'] + 10);
  }
  //Get the shifts that will be displayed.
  $query = "SELECT uid, start_time, end_time, ss_shifts.slot_id, shift_id FROM " .
    "{coop_shift_scheduler_shifts} AS ss_shifts INNER JOIN {coop_shift_scheduler_slots} AS ss_slots ON ss_shifts.slot_id = ss_slots.slot_id " .
    "WHERE start_time > :starttime AND ss_slots.status = :ssstatus AND start_time < :endtime " .
    "ORDER BY ss_shifts.start_time, ss_shifts.slot_id";
  $queryResult = db_query($query, array(
	':starttime' => date("Y-m-d H:i:s", $midnight), 
	':ssstatus'  => 0, 
	':endtime'   => date("Y-m-d H:i:s", $end_time),
	));

  // Move midnight to midnight on the day after the first day to be displayed.
  $midnight = $midnight + (60 * 60 * 24);

  // Iterate over the rows returned by the query, writing
  // the relevant data to the page content.

  $schedule_header = array();
  $schedule_header[] = array(
    'data'  => t('Date'),
    'class' => 'schedule-header',
  );

  // Get the slot names and the number of slots.
  $slots_result = db_query("SELECT slot_id, display_name FROM {coop_shift_scheduler_slots} WHERE status = :sta ORDER BY {coop_shift_scheduler_slots}.display_name", array(':sta' => 0)); // Get only the active slots.
  $slot_ids = array();
  foreach($slots_result as $slot_row){
    $slot_ids[] = $slot_row->slot_id;
    $schedule_header[] = array(
	 'data'  => $slot_row->display_name,
     'class' => 'schedule-header',
    );
  }
  $schedule_rows = array();
  $volunteer_cells = array();
  foreach ($slot_ids as $slot_id) {
    // Initialize $volunteer_cells.
    $volunteer_cells[$slot_id] = '';
  }
  foreach ($queryResult as $row){
    $has_content = TRUE;
    $start_time_t = strtotime($row->start_time);
    $end_time_t = strtotime($row->end_time);
    if ($start_time_t > $midnight) {
      // This is a new day, so write the row and reset the variables appropriately.
      _coop_shift_scheduler_write_date_row($schedule_rows, $volunteer_cells, $midnight - 10, $slot_ids);
      $midnight = mktime(0, 0, 0, date('n', $start_time_t), date('j', $start_time_t) + 1, date('Y', $start_time_t) ); // Move $midnight to the midnight after the start time.
      foreach ($slot_ids as $slot_id) {
        // Initialize $volunteer_cells.
        $volunteer_cells[$slot_id] = '';
      }
    }
    $shift_text = _coop_schedule_format_shift_text($row->uid, $row->shift_id, $start_time_t, $end_time_t);
    $volunteer_cells[$row->slot_id] .= '<p> ' . $shift_text .  "</p>"; // Does these really need to be contained within a paragraph tags? It would be more efficient to define a class for the TR and then style it in the CSS.
  }
  _coop_shift_scheduler_write_date_row($schedule_rows, $volunteer_cells, $midnight -10, $slot_ids); // Write the last day.


  // Display something if there is no content on the page.
  if ( !$has_content) {
    $page_content .= '<p><strong>' . t('There are no shifts to display in this date range.') . '</strong></p>';
  }
  else {
	$page_content .= theme('table', array('header' => $schedule_header, 'rows' => $schedule_rows));
  }
  return _coop_shift_scheduler_wrap_content($page_content);
}


/***** NEW COOP SHIFT SCHEDULER FUNCTIONS ****/
/* Committee */
/**
 *
 * Define the apperance of the admin_committee page.
 * If a committee_id is specified in url (e.g. admin/settings/coop_shift_scheduler/committee/4),
 * this basically just renders coop_shift_scheduler_admin_committee_form. Otherwise
 * it shows a table of all the defined committee with links to perform admin tasks
 * specifically for each slot.
 *
 * @ingroup admin
 */
function coop_shift_scheduler_admin_committee() {
	$output = Committee::admin();
  return $output;
}
/**
 * Form builder for changing ommittee roles.
 *
 * @see coop_shift_scheduler_admin_ommittee_validate()
 * @see coop_shift_scheduler_admin_ommittee_submit()
 *
 *
 * @ingroup forms
 * @ingroup admin
 */
function coop_shift_scheduler_admin_committee_form() {
	$form = Committee::admin_form();
  return $form;
}
/**
 * Validate Committe Add/Edit form
 *
 *
 * @ingroup forms
 * @ingroup admin
**/
function coop_shift_scheduler_admin_committee_validate($form, $form_state){
  Committee::admin_validate($form, $form_state);
}
/**
 * Form submission handler for coop_shift_scheduler_admin_committee_form()
 *
 * @see coop_shift_scheduler_admin_committee_form()
 * @see coop_shift_scheduler_admin_committee_validate()
 *
 *
 * @ingroup admin
 */
function coop_shift_scheduler_admin_committee_submit($form, $form_state) {
	$form = Committee::admin_submit($form, $form_state);
  return $form;
}

/* Job */
/**
 *
 * Define the apperance of the admin_committee page.
 * If a committee_id is specified in url (e.g. admin/settings/coop_shift_scheduler/committee/4),
 * this basically just renders coop_shift_scheduler_admin_committee_form. Otherwise
 * it shows a table of all the defined committee with links to perform admin tasks
 * specifically for each slot.
 *
 * @ingroup admin
 */
function coop_shift_scheduler_admin_job() {
	$output = Job::admin();
  return $output;
}
/**
 * Form builder for changing ommittee roles.
 *
 * @see coop_shift_scheduler_admin_ommittee_validate()
 * @see coop_shift_scheduler_admin_ommittee_submit()
 *
 *
 * @ingroup forms
 * @ingroup admin
 */
function coop_shift_scheduler_admin_job_form() {
	$form = Job::admin_form();
  return $form;
}
/**
 * Validate Committe Add/Edit form
 *
 *
 * @ingroup forms
 * @ingroup admin
**/
function coop_shift_scheduler_admin_job_validate($form, $form_state){
  Job::admin_validate($form, $form_state);
}
/**
 * Form submission handler for coop_shift_scheduler_admin_committee_form()
 *
 * @see coop_shift_scheduler_admin_committee_form()
 * @see coop_shift_scheduler_admin_committee_validate()
 *
 *
 * @ingroup admin
 */
function coop_shift_scheduler_admin_job_submit($form, $form_state) {
	$form = Job::admin_submit($form, $form_state);
  return $form;
}


/**
 * Display Home Page for Shift Scheduler Admin
 *
 *
 * @ingroup admin
 */
function coop_shift_scheduler_admin_home(){
  $content = "in coop_shift_scheduler_admin_home";
  return $content;
}
 
/***** END - NEW COOP SHIFT SCHEDULER FUNCTIONS ****/


/**** ADMINISTRATIVE FEATURES *******

 Everything beyond this point defines administrative features for
 customizing the shift schedule to a particular organization.  For example,
 these functions will define the pages that allow you to create new slots,
 create default times for each of the slots, rename slots, delete slots,
 deactivate slots, etc.

 */
/**
 * Implementation of hook_menu().
 *
 * @todo Find a way to get something as a normal menu item.
 */
function coop_shift_scheduler_menu() {
  $items = array();
  $items['coop_shift_scheduler'] = array(
    'title'            => 'Coop Shift Schedule',
    'page callback'    => 'coop_shift_scheduler_schedule',
    'access arguments' => array('access coop shift schedule'),
    'type'             => MENU_NORMAL_ITEM,
  );

  /* ADMIN GROUP */
  $items['admin/settings/coop_shift_scheduler/committee'] = array(
    'title'            => 'Edit coop Shift Scheduler committees',
    'page callback'    => 'coop_shift_scheduler_admin_committee',
    'access arguments' => array('administer coop_shift_scheduler'),
    'type'             => MENU_NORMAL_ITEM,
  );
  $items['admin/settings/coop_shift_scheduler/job'] = array(
    'title'            => 'Edit coop Shift Scheduler Jobs',
    'page callback'    => 'coop_shift_scheduler_admin_job',
    'access arguments' => array('administer coop_shift_scheduler'),
    'type'             => MENU_NORMAL_ITEM,
  );
  $items['admin/settings/coop_shift_scheduler/shift'] = array(
    'title'            => 'Edit coop Shift Scheduler Shift',
    'page callback'    => 'coop_shift_scheduler_admin_shift',
    'access arguments' => array('administer coop_shift_scheduler'),
    'type'             => MENU_NORMAL_ITEM,
  );
  $items['admin/settings/coop_shift_scheduler/shiftAssignment'] = array(
    'title'            => 'Edit coop Shift Scheduler shiftAssignment',
    'page callback'    => 'coop_shift_scheduler_admin_shiftAssignment',
    'access arguments' => array('administer coop_shift_scheduler'),
    'type'             => MENU_NORMAL_ITEM,
  );
/* */
  $items['admin/settings/coop_shift_scheduler'] = array(
    'title'            => '*NEW*coop Shift Scheduler',
    'description'      => 'Administer the slots and default shifts on the shift schedule.',
    'access arguments' => array( 'administer coop_shift_scheduler'),
    'page callback'    => 'coop_shift_scheduler_admin_home',
    'type'             => MENU_NORMAL_ITEM,
  );

  
  $items['admin/settings/coop_shift_scheduler/configure'] = array(
    'title'            => 'Configure coop Shift Scheduler',
    'page callback'    => 'coop_shift_scheduler_configure',
    'access arguments' => array('administer coop_shift_scheduler'),
    'type'             => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
  *@group Utilities
**/

/**
 * Form builder for Date Fields.
 *
 *
 * @ingroup forms
 * @ingroup utilities
 */
function _util_form_date($element_name, $title, $default_date, $date_format){
 // Provide a default date in the format YYYY-MM-DD HH:MM:SS.
    $date = '2008-12-31 00:00:00';
    if(isset($default_date)){ 
      $date = $default_date;
    }
  // Provide a format using regular PHP format parts (see documentation on php.net).
  // If you're using a date_select, the format will control the order of the date parts in the selector,
  // rearrange them any way you like. Parts left out of the format will not be displayed to the user.
    $format = 'Y-m-d H';
    if(isset($date_format)){ 
      $format = $date_format;
    }

  return array(
     '#type' => 'date_select', // types 'date_text' and 'date_timezone' are also supported. See .inc file.
     '#title' => $title,
     '#default_value' => $date,
     '#date_format' => $format,
     '#date_label_position' => 'within', // See other available attributes and what they do in date_api_elements.inc
     //'#date_timezone' => 'America/New York', // Optional, if your date has a timezone other than the site timezone.
     '#date_increment' => 30, // Optional, used by the date_select and date_popup elements to increment minutes and seconds.
     '#date_year_range' => '-3:+3', // Optional, used to set the year range (back 3 years and forward 3 years is the default).
  );

}