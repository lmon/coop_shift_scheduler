<?php

/**
 * @file
 *
 * The coop_shift_scheduler module.
 */

/**
 * Implements hook_help().
 */
function coop_shift_scheduler_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#coop_shift_scheduler":
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Displays the shift schedule managed by coop_shift_scheduler') . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_permission().
 */
function coop_shift_scheduler_permission() {
  return array(
	'access coop shift schedule' => array(
	  'title'         => t('Access coop shift schedule'),
	  'description'   => t('Enable to access on the coop shift schedule.'),	
	),
    'edit coop shift schedule' => array(
    	'title'       => t('Edit coop shift schedule'),
        'description' => t('Perform edit on coop shift schedule'),
    ),
    'administer coop_shift_scheduler' => array(
    	'title'       => t('Administer coop_shift_scheduler'),
        'description' => t('Perform administration tasks for shift schedule'),
    ),    
    'add to coop shift schedule' => array(
    	'title'       => t('Add to coop shift schedule'),
        'description' => t('Enable to add shift on schedule'),    	
    ),
  );
}

/**
 * Implements hook_init.
 * Calls drupal_add_css() so that coop_shift_scheduler.css is
 * appended to the top of each of the pages.
 */
function coop_shift_scheduler_init() {
//  if (drupal_is_front_page()){
    drupal_add_css(drupal_get_path('module', 'coop_shift_scheduler') . '/coop_shift_scheduler.css');
//  }
}

/**
 * Wraps string in a div tag specific to this module to make css work.
 */
function _coop_shift_scheduler_wrap_content($content) {
  return '<div id="shift-scheduler">' . $content . '</div>';
}

/**
 * Write a table row representing a given day's shifts.
 * Used as a subroutine in coop_shift_scheduler_schedule().
 *
 * @param page_content
 *   The page_content so far, to which the table row will be appended.
 * @param slot_cells
 *   An array of strings representing the content that should be written
 *   for each slot.
 * @param timestamp
 *   A timestamp that occurs sometime on the day to be written.
 * @param slot_ids
 *   An array with all of the slot id numbers.
 */
function _coop_shift_scheduler_write_date_row(&$schedule_rows, $slot_cells, $timestamp, $slot_ids) {
  $row_data = array();
  $row_data[] = array(
    'data' => '<strong>' . date('l', $timestamp) . '</strong><br /><strong>' . date('n/j/Y', $timestamp) . '</strong>',
    'class' => 'schedule-display',
  );
  foreach ($slot_ids as $slot_id) {
    $row_data[] =  $slot_cells[$slot_id];
  }
  $schedule_rows[] = array('data' => $row_data);
}


/**
 * Form builder for displaying the shift schedule between the start and end
 * dates, inclusive.
 *
 * @see coop_shift_scheduler_old_schedule_form_validate()
 * @see coop_shift_scheduler_old_schedule_form_submit()
 *
 * @ingroup forms
 */
function coop_shift_scheduler_old_schedule_form() {
  // Read dates from the url.
  if (isset($_GET['sday']) && isset($_GET['smon']) && isset($_GET['syear'])) {
    $start_date = array(
      'year'  => $_GET['syear'],
      'day'   => $_GET['sday'],
      'month' => $_GET['smon'],
    );
  }else {$start_date = NULL;}
  if (isset($_GET['eday']) && isset($_GET['emon']) && isset($_GET['eyear'])) {
    $end_date = array(
      'year'  => $_GET['eyear'],
      'day'   => $_GET['eday'],
      'month' => $_GET['emon'],
    );
  }else {$end_date = NULL;}

  $form = array();
  $form['start_date'] = array(
    '#type'          => 'date',
    '#required'      => TRUE,
    '#description'   => t('Select a start date to see an old shift schedule.'),
    '#default_value' => $start_date,
  );
  $form['end_date'] = array(
    '#type'          => 'date',
    '#required'      => TRUE,
    '#description'   => t('Select an end date to see an old shift schedule.'),
    '#default_value' => $end_date,
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('See old schedule'),
  );
  $form['#submit'][] = 'coop_shift_scheduler_old_schedule_form_submit';
  $form['#validate'][] = 'coop_shift_scheduler_old_schedule_form_validate';
  return $form;
}

/**
 * Form validation handler for coop_shift_scheduler_old_schedule_form().
 *
 * Validate that the start date is less than the end date
 *
 * @see coop_shift_scheduler_old_schedule_form()
 * @see coop_shift_scheduler_old_schedule_form_submit()
 */
function coop_shift_scheduler_old_schedule_form_validate($form, &$form_state) {
  // Get the day, month, and year.
  $start = $form_state['values']['start_date'];
  $end   = $form_state['values']['end_date'];
  // Convert to seconds.
  $start = mktime(0, 0, 0, $start['month'], $start['day'], $start['year']);
  $end   = mktime(0, 0, 0, $end['month'], $end['day'], $end['year']);
  if ($start > $end) {
    form_set_error("start_date", t("Start date must be less than end date."));
  }
}

/**
 * Form submission handler for coop_shift_scheduler_old_schedule_form().
 *
 * @see coop_shift_scheduler_old_schedule_form()
 * @see coop_shift_scheduler_old_schedule_form_validate()
 */
function coop_shift_scheduler_old_schedule_form_submit($form, &$form_state) {
  $start = $form_state['values']['start_date'];
  $end   = $form_state['values']['end_date'];
  $form_state['redirect'] = array(
    'coop_shift_scheduler', array(
	  'query'   => array(
        'sday'  => $start['day'],
        'smon'  => $start['month'],
        'syear' => $start['year'],
        'eday'  => $end['day'],
        'emon'  => $end['month'],
        'eyear' => $end['year'],
    )));
}

/**
 * Return the name of the user formatted as the first initial of his first name
 * followed by his last name, as in M. Strother.
 * If the profile module is not installed or a user has not specified his first
 * and last name, then return the user name.
 *
 * @param uid
 *   The user id of the person whose formatted name will be returned.
 */
function _coop_shift_scheduler_schedule_format_name($uid) {
  $display_name = NULL;
  if (module_exists('profile')) {
    $last_name_row  = db_query("SELECT pv.value FROM {profile_values} AS pv INNER JOIN {profile_fields} AS pf ON pv.fid = pf.fid WHERE pf.name = 'profile_last_name' AND pv.uid = :uid1", array(':uid1' => $uid))->fetchField();
    $first_name_row = db_query("SELECT value FROM {profile_values} AS pv INNER JOIN {profile_fields} AS pf ON pv.fid = pf.fid WHERE pf.name = 'profile_first_name' AND pv.uid :uid2", array(':uid2' => $uid))->fetchField();

    if (($first_name_row->rowCount() > 0) && ($last_name_row->rowCount() > 0)) {
      $first_name    = ucwords($first_name_row->value);
      $last_name     = ucwords($last_name_row->value);
      $first_initial = drupal_substr($first_name, 0, 1);
      $display_name  = $first_initial . ". " . $last_name;
    }
  }
  if (is_null($display_name)) {
    $display_name = db_query("SELECT name FROM {users} WHERE uid = :uid3", array(':uid3' => $uid))->fetchField();
  }
  return $display_name;
}

/**
 * Check to see if a user can claim a shift.
 *
 * @param uid
 *   The uid of the user wanting to claim the shift
 * @param shift_id
 *   The shift_id of the shift to be claimed.
 *
 * @return
 *   True iff the shift can be claimed by the user
 */

function _coop_shift_scheduler_can_claim($user_uid, $shift_id) {
  $slot_id = db_query("SELECT slot_id FROM {coop_shift_scheduler_shifts} WHERE shift_id = :shiftid_query", array(':shiftid_query' => $shift_id))->fetchField();

  $shiftuid = db_query("SELECT uid FROM {coop_shift_scheduler_shifts} WHERE shift_id = :shiftid_query", array(':shiftid_query' => $shift_id))->fetchField();

  $shiftstarttime = db_query("SELECT start_time FROM {coop_shift_scheduler_shifts} WHERE shift_id = :shiftid_query", array(':shiftid_query' => $shift_id))->fetchField();

  $check_user_elligible = db_query("SELECT u.uid FROM {users} AS u INNER JOIN {users_roles} AS ur ON ur.uid = u.uid INNER JOIN {coop_shift_scheduler_slot_roles} AS sssr ON ur.rid = sssr.rid WHERE sssr.slot_id = :sssrslotid AND u.uid = :uuid", array(
    	':sssrslotid' => $slot_id,
    	':uuid'       => $user_uid,
    ))->fetchField();

  $check_authenticated_user = db_query("SELECT rid FROM {coop_shift_scheduler_slot_roles} WHERE slot_id = :slotid AND rid = :roleid", array(
    	':slotid' => $slot_id, 
    	':roleid' => 2,           	
    ))->fetchField();

  $out = ($user_uid != 0
          && (variable_get('coop_shift_scheduler_claim_open_shifts', 0) == 1)
          && (($shiftuid == NULL) || ($shiftuid == 0))
          && (strtotime($shiftstarttime) > (REQUEST_TIME - 60 * 60 * 4))
          && (!empty($check_user_elligible) || // Check that user has an elligible role.
          !empty($check_authenticated_user))//The 'authenticated user' role (rid=2) isn't listed explicitly in {users_roles} so we check separatrely here.
  );
  return $out;
}


/**
 * Format a single shift and make the appropriate link. Called by
 * coop_shift_scheduler_schedule().
 *
 * @param uid
 *   The uid of the user filling the shift.
 * @param shift_id
 *   The id of the shift.
 * @param start_time_t
 *   The start time of the shift in seconds since unix epoch.
 * @param start_time_t
 *   The end time of the shift in seconds since unix epoch.
 *
 * @return
 *   A string with the name and time combined properly and set to be links.
 *
 * @see coop_shift_scheduler_schedule()
 */
function _coop_schedule_format_shift_text($uid, $shift_id, $start_time_t, $end_time_t) {
  global $user;
  //Get the volunteer's name.
  $name = t("Open Shift");
  if ($uid == -1) {
    $name = t("Closed Shift");
  }
  elseif ($uid) {
    $name = _coop_shift_scheduler_schedule_format_name($uid);
  }
  $time = date('Hi', $start_time_t) . ' - ' . date('Hi', $end_time_t);

  // If the user has the correct permissions, and the shift didn't occur too far
  // in the past (4 hours), make the text into a link so the shift can be edited.
  if (user_access('edit shift schedule')
          && $start_time_t > (REQUEST_TIME - 60 * 60 * 4)) {
    $ops = array('query' => array('shift' => "$shift_id"));
    if ($name == t("Open Shift")) {
      // Make the link red.
      $ops['attributes'] = array('class' => 'open-shift');
    }
    elseif ($uid == -1) {
      // Make the link green
      $ops['attributes'] = array('class' => 'closed-shift');
    }
    $link_page = 'coop_shift_scheduler/change_shift';
  }
  // If claiming shifts is enabled and the shift is open, then allow the user to
  // claim it.
  elseif (_coop_shift_scheduler_can_claim($user->uid, $shift_id)) {
    $ops = array(
	  	'query'      => array(
        'shift_id' => $shift_id,        
        'uid'      => $user->uid,
        'claim'    => TRUE),
	  	);
    $ops['attributes'] = array('style' => 'color: #FF0000');
    $link_page = 'coop_shift_scheduler';
  }
  // If relinquishing shifts is enabled and the shift belongs to this user,
  // allow user to relinquish it.
  elseif ($user->uid == $uid
              && $user->uid != 0
              && variable_get('coop_shift_scheduler_relinquish_shifts', 0) == 1
              && $start_time_t > (REQUEST_TIME - 60 * 60 * 4)) {
    $ops = array(
	  	'query' => array(
        'shift_id' => $shift_id,
        'relinquish' => TRUE));
    $link_page = 'coop_shift_scheduler';
  }
  //Set the shift text to be a link
  if (variable_get('coop_shift_scheduler_link_to_profile', FALSE)) {
    if ($uid > 0) {
      $name = l($name, 'user' . '/' . $uid);
    }
    if (isset($link_page) && isset($ops)) {
      $time = l($time, $link_page, $ops);
    }
    $shift_text = $name . ' ' . $time;
  }
  else {
    $shift_text = $name . ' ' . $time;
    if (isset($link_page) && isset($ops)) {
      $shift_text = l($shift_text, $link_page, $ops); //link
    }
  }
	//Regardless of whether the text is a link or not, wrap it in a span with
	//the appropriate class (colors things appropriately)
  if ($uid == 0 || $uid == NULL) {
    //If it's still an open shift, make it red and bold.
    $shift_text = '<span class="open-shift">' . $shift_text . '</span>';
  }
  elseif ($uid == -1) {
    $shift_text = '<span class="closed-shift">' . $shift_text . '</span>';
  }
  elseif ($uid == $user->uid) {
    $shift_text = '<span class="taken-shift">' . $shift_text . '</span>';
  }
  return $shift_text;

}

/**
 * Format the display of the shift schedule.
 * Only used as a callback in coop_shift_scheduler_menu().
 *
 * @see coop_shift_scheduler_menu()
 *
 * @todo use drupal calls to make the table
 */
function coop_shift_scheduler_schedule() {
  $page_content = '';
  $old_schedule_form = drupal_get_form('coop_shift_scheduler_old_schedule_form');
  $page_content .= drupal_render($old_schedule_form);
  $has_content = FALSE;
  // Get access to global variable representing the current user.
  global $user;
  // Handle claiming open shifts.
  if (isset($_GET['claim']) && isset($_GET['uid']) && ($_GET['uid'] == $user->uid) && isset($_GET['shift_id'])
          && variable_get('coop_shift_scheduler_claim_open_shifts', FALSE)
          && _coop_shift_scheduler_can_claim($user->uid, $_GET['shift_id'])){
		db_update('coop_shift_scheduler_shifts')
			->fields(array('uid' => (int) $user->uid))
			->condition('shift_id', (int) $_GET['shift_id'], '=')
			->execute();	
  }
  // Handle relinquishing shifts.
  elseif (isset($_GET['relinquish']) && isset($_GET['shift_id'])
              && variable_get('coop_shift_scheduler_relinquish_shifts', FALSE)) {
    $shift_info = db_query("SELECT uid FROM {coop_shift_scheduler_shifts} WHERE shift_id = :sid", array(':sid' => (int) $_GET['shift_id']))->fetchField();

    // Ensure that user is trying to relinquish his own shift.
    if ($shift_info == $user->uid) {
      //Set to open shift.
	  db_update('coop_shift_scheduler_shifts')
		->fields(array('uid' => NULL))
		->condition('shift_id', (int) $_GET['shift_id'], '=')
		->execute();      
    }
  }

  // Get start time.
  date_default_timezone_set(variable_get('date_default_timezone', date_default_timezone_get()));
  $today = getdate();
  // If specified in the URL, specify the time on which to start looking for
  // shifts.
  if (isset($_GET['sday']) && isset($_GET['smon']) && isset($_GET['syear'])) {
    $midnight = mktime(0, 0, 0, (int) $_GET['smon'], (int) $_GET['sday'], (int) $_GET['syear']);
  }
  // Otherwise, just start at yesterday.
  else {
    $midnight = mktime(0, 0, 0, $today['mon'], $today['mday'], $today['year']) - 60 * 60 * 24;
  }

  // Get end time.
  // If specified in the URL, specify the time on which to start looking for
  // shifts.
  if (isset($_GET['eday']) && isset($_GET['emon']) && isset($_GET['eyear'])) {
    $end_time = mktime(0, 0, 0, (int) $_GET['emon'], (int) $_GET['eday'] + 1, (int) $_GET['eyear']);
  }
  // If no end time specified, pick 10 years from today.
  else {
    $end_time = mktime(0, 0, 0, $today['mon'], $today['mday'], (int) $today['year'] + 10);
  }
  //Get the shifts that will be displayed.
  $query = "SELECT uid, start_time, end_time, ss_shifts.slot_id, shift_id FROM " .
    "{coop_shift_scheduler_shifts} AS ss_shifts INNER JOIN {coop_shift_scheduler_slots} AS ss_slots ON ss_shifts.slot_id = ss_slots.slot_id " .
    "WHERE start_time > :starttime AND ss_slots.status = :ssstatus AND start_time < :endtime " .
    "ORDER BY ss_shifts.start_time, ss_shifts.slot_id";
  $queryResult = db_query($query, array(
	':starttime' => date("Y-m-d H:i:s", $midnight), 
	':ssstatus'  => 0, 
	':endtime'   => date("Y-m-d H:i:s", $end_time),
	));

  // Move midnight to midnight on the day after the first day to be displayed.
  $midnight = $midnight + (60 * 60 * 24);

  // Iterate over the rows returned by the query, writing
  // the relevant data to the page content.

  $schedule_header = array();
  $schedule_header[] = array(
    'data'  => t('Date'),
    'class' => 'schedule-header',
  );

  // Get the slot names and the number of slots.
  $slots_result = db_query("SELECT slot_id, display_name FROM {coop_shift_scheduler_slots} WHERE status = :sta ORDER BY {coop_shift_scheduler_slots}.display_name", array(':sta' => 0)); // Get only the active slots.
  $slot_ids = array();
  foreach($slots_result as $slot_row){
    $slot_ids[] = $slot_row->slot_id;
    $schedule_header[] = array(
	 'data'  => $slot_row->display_name,
     'class' => 'schedule-header',
    );
  }
  $schedule_rows = array();
  $volunteer_cells = array();
  foreach ($slot_ids as $slot_id) {
    // Initialize $volunteer_cells.
    $volunteer_cells[$slot_id] = '';
  }
  foreach ($queryResult as $row){
    $has_content = TRUE;
    $start_time_t = strtotime($row->start_time);
    $end_time_t = strtotime($row->end_time);
    if ($start_time_t > $midnight) {
      // This is a new day, so write the row and reset the variables appropriately.
      _coop_shift_scheduler_write_date_row($schedule_rows, $volunteer_cells, $midnight - 10, $slot_ids);
      $midnight = mktime(0, 0, 0, date('n', $start_time_t), date('j', $start_time_t) + 1, date('Y', $start_time_t) ); // Move $midnight to the midnight after the start time.
      foreach ($slot_ids as $slot_id) {
        // Initialize $volunteer_cells.
        $volunteer_cells[$slot_id] = '';
      }
    }
    $shift_text = _coop_schedule_format_shift_text($row->uid, $row->shift_id, $start_time_t, $end_time_t);
    $volunteer_cells[$row->slot_id] .= '<p> ' . $shift_text .  "</p>"; // Does these really need to be contained within a paragraph tags? It would be more efficient to define a class for the TR and then style it in the CSS.
  }
  _coop_shift_scheduler_write_date_row($schedule_rows, $volunteer_cells, $midnight -10, $slot_ids); // Write the last day.


  // Display something if there is no content on the page.
  if ( !$has_content) {
    $page_content .= '<p><strong>' . t('There are no shifts to display in this date range.') . '</strong></p>';
  }
  else {
	$page_content .= theme('table', array('header' => $schedule_header, 'rows' => $schedule_rows));
  }
  return _coop_shift_scheduler_wrap_content($page_content);
}

/**
 * Form builder for creating new days on the shift schedule.
 *
 * @see coop_shift_scheduler_create_days_form_validate()
 * @see coop_shift_scheduler_create_days_form_submit()
 *
 * @ingroup forms
 */
function coop_shift_scheduler_create_days_form($form_state) {
//  $form = array();
  $form['start_date'] = array(
    '#type'        => 'date',
    '#title'       => t('Start date'),
    '#required'    => TRUE,
    '#description' => t('The first date to be created on the shift schedule.'),
  );
  $form['end_date'] = array(
    '#type'        => 'date',
    '#title'       => t('End date'),
    '#required'    => TRUE,
    '#description' => t('The last date to be created on the shift schedule.'),
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type'        => 'submit',
    '#value'       => t('Add days'),
  );
  $form['#submit'][] = 'coop_shift_scheduler_create_days_form_submit';
  return $form;
}

/**
 * Form validation handler for coop_shift_scheduler_create_days_form().
 *
 * @see coop_shift_scheduler_create_days_form()
 * @see coop_shift_scheduler_create_days_form_submit()
 */
function coop_shift_scheduler_create_days_form_validate($form, &$form_state) {
  $result = db_query("SELECT * FROM {coop_shift_scheduler_slot_times} AS ssst INNER JOIN {coop_shift_scheduler_slots} AS sss ON ssst.slot_id=sss.slot_id WHERE sss.status = :status", array(':status' => 0));

  // Get the start date from the form.
  $sday     = $form_state['values']['start_date']['day'];
  $smon     = $form_state['values']['start_date']['month'];
  $syear    = $form_state['values']['start_date']['year'];
  $eday     = $form_state['values']['end_date']['day'];
  $emon     = $form_state['values']['end_date']['month'];
  $eyear    = $form_state['values']['end_date']['year'];
  $num_days = (mktime(0, 0, 0, $emon, $eday, $eyear) -  mktime(0, 0, 0, $smon, $sday, $syear)) / (60 * 60 * 24) + 1; // Compute and save the total number of days being added.

  foreach ($result as $slot_time){
    for ($i = 0; $i < $num_days; $i++) {
      $start_time = mktime((int) ($slot_time->start_time[11] . $slot_time->start_time[12]), (int) ($slot_time->start_time[14] . $slot_time->start_time[15]), 0, $smon, $sday + $i, $syear);
      $end_time = mktime((int) ($slot_time->end_time[11] . $slot_time->end_time[12]), (int) ($slot_time->end_time[14] . $slot_time->end_time[15]), 0, $smon, $sday + $i, $syear);

      if ($end_time < $start_time) {
        // Infer if end time is on the next day.
        $end_time = $end_time + 60 * 60 * 24;
      }

      if ($slot_time->{strtolower(date('l', $start_time))}) {
        // Check if the shift should be created by the day of the week.
        $sts = date("Y-m-d H:i:00", $start_time); // sts stands for start time string.
        $ets = date("Y-m-d H:i:00", $end_time); // ets stands for end time string.
			
		$query = db_query("SELECT shift_id FROM {coop_shift_scheduler_shifts} WHERE slot_id = :slotid AND start_time = :starttime AND end_time = :endtime", array(
			':slotid'    => $slot_time->slot_id,
			':starttime' => $sts,
			':endtime'   => $ets,
			));
		
        if ($query->rowCount() > 0){
          form_set_error('start_date', t('Adding days failed because adding this date range results in the creation of duplicate shifts'));
        }
      }
    }
  }
}

/**
 * Form validation handler for coop_shift_scheduler_create_days_form().
 *
 * @see coop_shift_scheduler_create_days_form()
 * @see coop_shift_scheduler_create_days_form_validate()
 */
function coop_shift_scheduler_create_days_form_submit($form, &$form_state) {
  $result = db_query("SELECT * FROM {coop_shift_scheduler_slot_times} INNER JOIN {coop_shift_scheduler_slots} ON {coop_shift_scheduler_slot_times}.slot_id = {coop_shift_scheduler_slots}.slot_id WHERE {coop_shift_scheduler_slots}.status = :sss_status AND {coop_shift_scheduler_slots}.slot_type = :sss_type", array(
	':sss_status' => 0, 
	':sss_type'   => 0,
  ));

  // Get start and end dates from form.
  $sday  = $form_state['values']['start_date']['day'];
  $smon  = $form_state['values']['start_date']['month'];
  $syear = $form_state['values']['start_date']['year'];
  $eday  = $form_state['values']['end_date']['day'];
  $emon  = $form_state['values']['end_date']['month'];
  $eyear = $form_state['values']['end_date']['year'];

  // Compute and save the total number of days being added.
  $num_days = (mktime(0, 0, 0, $emon, $eday, $eyear) - mktime(0, 0, 0, $smon, $sday, $syear)) / (60 * 60 * 24) + 1;

  foreach ($result as $slot_time){
    for ($i = 0; $i < $num_days; $i++) {
      $start_time = mktime((int) ($slot_time->start_time[11] . $slot_time->start_time[12]), (int) ($slot_time->start_time[14] . $slot_time->start_time[15]), 0, $smon, $sday + $i, $syear);
      $end_time   = mktime((int) ($slot_time->end_time[11] . $slot_time->end_time[12]), (int) ($slot_time->end_time[14] . $slot_time->end_time[15]), 0, $smon, $sday + $i, $syear);

      // Infer if end_time is on the next day.
      if ($end_time < $start_time) {
        $end_time = $end_time + (60 * 60 * 24);
      }
      // Check the day of the week to see if shift should be created.
      if ($slot_time->{strtolower(date('l', $start_time))}) {
        $new_record = array(
          'slot_id' => $slot_time->slot_id,
          'start_time' => date("Y-m-d H:i:00", $start_time),
          'end_time' => date("Y-m-d H:i:00", $end_time),
          // uid is purposely left as null so the shift is open.
        );
        drupal_write_record('coop_shift_scheduler_shifts', $new_record);
      }
    }
  }
  $form_state['redirect'] = array('coop_shift_scheduler');
}

/**
 * Define the appearance of the add_days page.
 * Only used as a callback in coop_shift_scheduler_menu().
 *
 * @see coop_shift_scheduler_menu()
 */
function coop_shift_scheduler_add_days() {
  // All we want on the page is the form, so we just automatically generate it
  // using the standard drupal methods and return it.
  $out = drupal_get_form('coop_shift_scheduler_create_days_form');
  return drupal_render($out);
}


/**
 * Form builder for the change shift page. Use this form by appending the return
 * value of coop_shift_scheduler_add_days() to your page content.
 *
 * @see coop_shift_scheduler_add_days()
 * @see coop_shift_scheduler_change_shift_form_submit()
 *
 * @ingroup forms
 */
function coop_shift_scheduler_change_shift_form($form_state) {
  $shift_id = $_GET['shift'];
  // Get information about the shift that we're editing.
  $shift_uid      = db_query("SELECT uid FROM {coop_shift_scheduler_shifts} WHERE shift_id = :shift_id", array(':shift_id' => $shift_id))->fetchField();
  $shift_slot_id  = db_query("SELECT slot_id FROM {coop_shift_scheduler_shifts} WHERE shift_id = :shift_id", array(':shift_id' => $shift_id))->fetchField();

  // Get a list of volunteers who are eligible to take this shift.
  $options = array();
  $options[0]  = t('Open Shift');
  $options[-1] = t('Closed Shift');
  $volunteer_info = db_query("SELECT * FROM {coop_shift_scheduler_slot_roles} WHERE slot_id = :slotid AND rid = :rid", array(
	':slotid' => $shift_slot_id,
	':rid'    => 2,
	))->fetchObject();
  if ($volunteer_info) {
    // If the "authenticated user" role is set to be eligible to fill this slot
    // just get a list of all of the users, since they all must have the "authenticated
    // user" role.
    $result = db_query("SELECT uid, name FROM {users} WHERE uid > :uid ORDER BY name", array(':uid' => 1));
    foreach ($result as $row){
      $options[$row->uid] = $row->name;
    }
  }
  else {
	$options_result = db_query("SELECT u.uid, u.name, ur.rid FROM {users} AS u INNER JOIN {users_roles} AS ur ON ur.uid = u.uid INNER JOIN {coop_shift_scheduler_slot_roles} AS sssr ON ur.rid = sssr.rid WHERE sssr.slot_id = :sssrslotid ORDER BY u.name", array(':sssrslotid' => $shift_slot_id));
    foreach($options_result as $options_row){
      $options[$options_row->uid] = $options_row->name;
    }
  }
  $default_uid = 0;
  if(isset($shift_uid)){
	$default_uid = $shift_uid;
  }
  $form = array();
  $instructions = t('Choose which volunteer is taking the shift from the "Volunteer" menu.') . ' ' .
    t('To split the shift between two volunteers, fill the time (in military format) at which the secondary volunteer will take over for the first volunteer in the "Split Time" box.') . ' ' .
    t('An "Open Shift" is a shift that should be filled but no one has volunteered to take it yet.') . ' ' .
    t('A "Closed Shift" is a shift which was placed on the schedule, but does not require anyone to take it.');
  $form['instructions'] = array(
    '#type'        => 'item',
    '#title'       => t('Instructions'),
    '#description' => $instructions,
  );
  $form['shift_id'] = array(
    '#type'        => 'hidden',
    '#value'       => $shift_id,
  );

  $form['volunteer'] = array(
    '#type'          => 'select',
    '#title'         => t('Volunteer'),
    '#default_value' => $default_uid,
    '#options'       => $options,
    '#description'   => t('The volunteer on this shift.'),
		'#attribute'		 => array('autofocus'=>''),
  );
  $form['split_time'] = array(
    '#type'      => 'textfield',
    '#title'     => t('Split time'),
    '#size'      => 10,
    '#maxlength' => 4,
  );
  $form['secondary_volunteer'] = array(
    '#type'          => 'select',
    '#title'         => t('Secondary volunteer'),
    '#default_value' => 0,
    '#options'       => $options,
    '#description'   => t("The volunteer to take the second part of the shift.  Leave this blank unless you're splitting the shift."),
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type'   => 'submit',
    '#value'  => t('Change shift'),
  );
  $form['#submit'][]   = 'coop_shift_scheduler_change_shift_form_submit';
  $form['#validate'][] = 'coop_shift_scheduler_change_shift_form_validate';
  return $form;
}

function coop_shift_scheduler_change_shift_form_validate($form, &$form_state) {
  $fi = $form_state['values'];
  if ( drupal_strlen($fi['split_time']) != 4 && drupal_strlen($fi['split_time']) != 0 ) {
    form_set_error('split_time', t('The split time must be a valid military time.'));
  }

  $shift_id =  (int) $fi['shift_id'];
  $shift_info = db_query("SELECT * FROM {coop_shift_scheduler_shifts} WHERE shift_id = :shiftid", array(':shiftid' => $shift_id));
  foreach ($shift_info as $shifttime){//this loop should only execute once
	  $start_time = strtotime($shifttime->start_time);
	  $end_time = strtotime($shifttime->end_time);
  }

  // split is true if and only if a valid split has been entered.
  $split_time = 0;
  $split = ( drupal_strlen($fi['split_time']) == 4); // This is a preliminary check that a time and secondary volunteer have been entered.
  if ($split) {
    // Convert the military time entry into a full timestamp.
    $st = $fi['split_time']; //st stands for "split time".
    $hour = (int) ($st[0] . $st[1]);
    $minute = (int) ($st[2] . $st[3]);
    // Since the split time doesn't specify a date, we have to
    // infer the date of the split time based on where it occurs relative to the start time.
    $temp_split_time = mktime($hour, $minute);
    if ($temp_split_time < mktime((int) date('G', $end_time), (int) date('i', $end_time))) {
      // If it's before the start time, then both the split and the end times must occur on the next day.
      $split_time = mktime($hour, $minute, 0, date('n', $end_time), date('j', $end_time), date('Y', $end_time));
    }
    else {
      // Otherwise the split occurs on the same day as the start time.
      $split_time = mktime($hour, $minute, 0, date('n', $start_time), date('j', $start_time), date('Y', $start_time));
    }
    $form_state['values']['split_time_int'] = $split_time;
  }
  if ($split && !($start_time < $split_time  && $split_time < $end_time)) {
    // Check for an invalid split time.
    form_set_error('split_time', t('The split time specified falls outside of the valid range.'));
  }
  $query_string = "SELECT * FROM {coop_shift_scheduler_shifts} WHERE uid = :new_uid AND uid > 0 AND uid IS NOT NULL AND shift_id != :current_shift_id AND ((start_time >= :new_start_time AND start_time < :new_end_time) OR (end_time > :new_start_time AND end_time <= :new_end_time))";
  $start_time_string = date("Y-m-d H:i:00", $start_time);
  $end_time_string = date("Y-m-d H:i:00", $end_time);
  $split_problem = FALSE;
  if (!$split) {
    $query = db_query($query_string, array(
	  ':new_uid' => $fi['volunteer'],
	  ':new_start_time' =>$start_time_string,
	  ':new_end_time' =>$end_time_string,
          ':current_shift_id' =>$fi['shift_id']
	  )
	)->fetchField();
    if (!empty($query)) {
  	form_set_error('volunteer', t('Shift change results in putting the first volunteer in two shifts at once'));
    }
  }
  else {
    $split_time_string = date("Y-m-d H:i:00", $split_time);
    // Check if the primary volunteer is already in another shift
    $query = db_query($query_string, array(
	  ':new_uid' => $fi['volunteer'],
	  ':new_start_time' =>$start_time_string,
	  ':new_end_time' =>$split_time_string,
          ':current_shift_id'=>$fi['shift_id']
      )
    )->fetchField();
    if (!empty($query)) {
      form_set_error('volunteer', t('Shift change results in putting the first volunteer in two shifts at once'));
    }
    else {
      $query = db_query($query_string, array(
	  ':new_uid' => $fi['secondary_volunteer'],
	  ':new_start_time' =>$split_time_string,
	  ':new_end_time' =>$end_time_string,
          ':current_shift_id' =>-99,//don't actually need this check here, so just add a useless check
        )
      )->fetchField();
      if (!empty($query)) {
        form_set_error('secondary_volunteer', t('Shift change results in putting the second volunteer in two shifts at once'));
      }
    }
  }
  
}

/*
 * Form submission handler for coop_shift_scheduler_change_shift_form().
 *
 * As with all form submission handlers,
 * this function should not be called directly.
 * Instead, it is called by the drupal core because we specify
 * $form['#submit'][]= 'coop_shift_scheduler_change_shift_form_submit'
 * in coop_shift_scheduler_change_shift_form.
 *
 * @see coop_shift_scheduler_change_shift_form()
 *
 * @ingroup forms
 *
 * @param form Provided by the drupal core
 * @param form_state Provided by the drupal core.
 */
function coop_shift_scheduler_change_shift_form_submit($form, &$form_state) {
  $fi = $form_state['values']; // fi stands for form_info

  // Get information about the shift that we're editing.
  $shift_id =  (int) $fi['shift_id'];

  $shift_start_time = db_query("SELECT start_time FROM {coop_shift_scheduler_shifts} WHERE shift_id = :shiftid", array(':shiftid' => $shift_id))->fetchField();
  $shift_end_time   = db_query("SELECT end_time FROM {coop_shift_scheduler_shifts} WHERE shift_id = :shiftid", array(':shiftid' => $shift_id))->fetchField();  
  $shift_slotid     = db_query("SELECT slot_id FROM {coop_shift_scheduler_shifts} WHERE shift_id = :shiftid", array(':shiftid' => $shift_id))->fetchField();
  $split_shiftid    = db_query("SELECT shift_id FROM {coop_shift_scheduler_shifts} WHERE shift_id = :shiftid", array(':shiftid' => $shift_id))->fetchField();

  $start_time = strtotime($shift_start_time);
  $end_time = strtotime($shift_end_time);

  // Split is true if and only if a valid split has been entered.
  $split_time = 0;
  $split = ( drupal_strlen($fi['split_time']) == 4); // Preliminary check that a time and secondary volunteer have been entered.
  if ($split) {
    // Convert the military time entry into a full timestamp.
    $split_time = $form_state['values']['split_time_int'];
  }


  if (!($split)) { // Simple case: the user isn't splitting a shift.
    // Update the shift.
    db_update('coop_shift_scheduler_shifts')
		->fields(array('uid' => $fi['volunteer']))
		->condition('shift_id', $split_shiftid, '=')
		->execute();
    // Find the next chronological shift in this slot and redirect to changing it.
    $next_shift_info = db_query("SELECT shift_id FROM {coop_shift_scheduler_shifts} WHERE slot_id = :slotid AND start_time = :starttime", array(
    	':slotid' => $shift_slotid,
    	':starttime' => $shift_end_time,
    ))->fetchField();
	
    if ($next_shift_info) {
      // If there is a next shift, redirect to changing it.
      $form_state['redirect'] = array(


	    'coop_shift_scheduler/change_shift', array(
		  'query' => array(
          'shift' => $next_shift_info,
      )));
    }
    else {
      // Otherwise, infer there are no more shifts in this slot
      // and redirect to the schedule display page.
      $form_state['redirect'] = array('coop_shift_scheduler');
    }
  }
  elseif ($split) {
    // Handle split.
	db_update('coop_shift_scheduler_shifts')
		->fields(array('uid' => $fi['volunteer'], 'end_time' => date('Y-m-d H:i:s', $split_time)))
		->condition('shift_id', $split_shiftid, '=')
		->execute();
    $new_record = array(
      'uid'        => $fi['secondary_volunteer'],
      'start_time' => date( 'Y-m-d H:i:s', $split_time),
      'end_time'   => date( 'Y-m-d H:i:s', $end_time),
      'slot_id'    => $shift_slotid,
    );
    drupal_write_record('coop_shift_scheduler_shifts', $new_record);
    $form_state['redirect'] = array('coop_shift_scheduler');
  }
}

/**
 * Define the appearance of the change shift page.
 * Determines which shift should be edited from the
 * URL by $_GET['shift'].
 */
function coop_shift_scheduler_change_shift() {
  //get the time and date of the shift
  $shift_start_time = db_query("SELECT start_time FROM {coop_shift_scheduler_shifts} WHERE shift_id = :shiftid", array(':shiftid' => (int) $_GET['shift']))->fetchField();
  $shift_end_time = db_query("SELECT end_time FROM {coop_shift_scheduler_shifts} WHERE shift_id = :shiftid", array(':shiftid' => (int) $_GET['shift']))->fetchField();
  $start_time = strtotime($shift_start_time);
  $end_time = strtotime($shift_end_time);
  drupal_set_title(t('Changing shift %st - %et on %sd',
  	array(
		'%st' => date('Hi', $start_time),
		'%et' => date('Hi', $end_time),
		'%sd' => date('M j', $start_time),
  	)
  )
  , PASS_THROUGH);
  // if the shift didn't happen in the past
  if ($start_time >= REQUEST_TIME - (60 * 60 * 4)) {
	$change_shift_form = drupal_get_form('coop_shift_scheduler_change_shift_form');
    $page_content = drupal_render($change_shift_form);
  }
  else {
    $page_content = t("This shift occured in the past. Please contact the webmaster to edit historical shifts.");
  }
  return _coop_shift_scheduler_wrap_content($page_content);
}

/**
 * Form builder for the old shifts form.
 *
 * @see coop_shift_scheduler_old_shifts_form_submit()
 *
 * @ingroup forms
 */
function coop_shift_scheduler_old_shifts_form($form_state) {
  global $user;
  // Get a list of all the volunteers
  $volunteer_options = array();
  $volunteer_options[0] = ' ';
  $volunteer_options_result = db_query("SELECT uid, name FROM {users} WHERE uid > :uid ORDER BY name", array(':uid' => 1));
  foreach($volunteer_options_result as $volunteer_options_row){
    $volunteer_options[$volunteer_options_row->uid] = $volunteer_options_row->name;
  }
  // Get a list of slots and save as options
  $slot_options = array();
  $slot_options[-1] = t('All');
  $slot_options_result = db_query("SELECT slot_id, display_name FROM {coop_shift_scheduler_slots} WHERE status = :sts", array(':sts' => 0));
  foreach($slot_options_result as $slot_options_row){
    $slot_options[$slot_options_row->slot_id] = $slot_options_row->display_name;
  }
  $form = array();
  $form['volunteer'] = array(
    '#type'          => 'select',
    '#title'         => t('Volunteer'),
    '#description'   => t('The volunteer whose shifts you would like to review.'),
    '#options'       => $volunteer_options,
    '#default_value' => $user->uid,
    '#required'      => TRUE,
    // $user is a global variable that refers to the currently logged in user
  );
  $form['slot'] = array(
    '#type'          => 'select',
    '#title'         => t('Slot'),
    '#description'   => t('Show only shifts taken in this slot. Select "All" to get all shifts.'),
    '#options'       => $slot_options,
    '#default_value' => -1,
    '#required'      => TRUE,
  );
  $form['start_date'] = array(
    '#type'          => 'date',
    '#title'         => t('Start date'),
    '#description'   => t('Default value is today'),
    '#required'      => TRUE,
  );
  $form['end_date'] = array(
    '#type'          => 'date',
    '#title'         => t('End date'),
    '#required'      => TRUE,
    '#description'   => t('Default value is a year from today.'),
    '#default_value' => array(
      'year'         => date('Y') + 1,
      'month'        => date('m'),
      'day'          => date('j'),
    ),
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type'          => 'submit',
    '#value'         => t('Submit'),
  );
  $form['#submit'][] = 'coop_shift_scheduler_old_shifts_form_submit';
  return $form;
}

/**
 * Form submission handler for coop_shift_scheduler_old_shifts_form().
 *
 * @see coop_shift_scheduler_old_shifts_form()
 */
function coop_shift_scheduler_old_shifts_form_submit($form, &$form_state) {
  $fi = $form_state['values'];
  $start_time = mktime(0, 0, 0, $fi['start_date']['month'], $fi['start_date']['day'], $fi['start_date']['year']);
  $end_time   = mktime(0, 0, 0, $fi['end_date']['month'], $fi['end_date']['day'], $fi['end_date']['year']);

  $form_state['redirect'] = array(
    'coop_shift_scheduler/old_shifts_results', array(
	'query'        => array( 
      'uid'        => $fi['volunteer'],
      'start_time' => $start_time,
      'end_time'   => $end_time,
      'slot_id'    => $form_state['values']['slot'],
  )));
}

/**
 * Define the appearance of the old shifts page.
 */
function coop_shift_scheduler_old_shifts() {
  $out = drupal_get_form('coop_shift_scheduler_old_shifts_form');
  return drupal_render($out);
}

/**
 * Define the appearance of the results page
 * which is displayed after the old shifts form
 * is submitted.
 *
 */
function coop_shift_scheduler_old_shifts_results() {
  $page_content = '';
  // Get the parameters from the URL.
  if (isset($_GET['uid']) && isset($_GET['start_time']) && isset($_GET['end_time'])) {
    $uid        = $_GET['uid'];
    $start_time = $_GET['start_time'];
    $end_time   = $_GET['end_time'];
    $volunteer = db_query("SELECT name FROM {users} WHERE uid = :uid", array(':uid' => $uid))->fetchField();
  }else {
    $uid        = NULL;
    $start_time = NULL;
    $end_time   = NULL;	
  }

  // Query the database.
  if (isset($_GET['slot_id']) && $_GET['slot_id'] == -1) {
    // Get all the shifts taken by the given user within
    // the given date range.
    $result = db_query("SELECT ss_shifts.slot_id, start_time, end_time, display_name \n " .
                       "FROM {coop_shift_scheduler_shifts} AS ss_shifts INNER JOIN {coop_shift_scheduler_slots} AS ss_slots ON ss_slots.slot_id=ss_shifts.slot_id \n " .
                       "WHERE uid = :uid AND (start_time > :starttime AND end_time < :endtime) \n " .
                       "ORDER BY start_time \n ", array(
      ':uid'       => $uid,
      ':starttime' => date('Y-m-d H:i:s', $start_time),
      ':endtime'   => date('Y-m-d H:i:s', $end_time),
      ));
  }
  else {
    // Give all the shifts taken by the given user *in the given slot*
    // within the given date range.
    $result = db_query("SELECT ss_shifts.slot_id, start_time, end_time, display_name \n " .
                       "FROM {coop_shift_scheduler_shifts} AS ss_shifts INNER JOIN {coop_shift_scheduler_slots} AS ss_slots ON ss_slots.slot_id=ss_shifts.slot_id \n " .
                       "WHERE uid = :uid AND (start_time > :starttime AND end_time < :endtime)  AND ss_shifts.slot_id = :sshiftslotid \n " .
                       "ORDER BY start_time \n ", array(
      ':uid' => $uid,
      ':starttime'    => date( 'Y-m-d H:i:s', $start_time),
      ':endtime'      => date( 'Y-m-d H:i:s', $end_time),
      ':sshiftslotid' => $_GET['slot_id'],
      ));
  }

  // Count the total amount of duty taken.
  $total_duty = 0;

  // write the results of the database query out into a table

  // Set up the table headers.
  // open the table html tag and add table headers
  $page_content .= '<table class="body-table">
    <tbody>
      <tr>
        <th valign="top" class="table-label"> ' . t('Date') . ' </th>
        <th valign="top"> ' . t('Shifts') . ' </th>
      </tr> ';
  $midnight = 0;
  $has_content = FALSE;
  foreach($result as $row){

    $has_content = TRUE;
    $stt = strtotime($row->start_time);
    $ett = strtotime($row->end_time);
		if ($ett < $stt){
			$total_duty +=$ett + 24 * 3600 - $stt;
		}else{
			$total_duty += $ett - $stt;
		}
    // if we've entered a new day,
    // then add a date label and update the $midnight marker
    if ($midnight < $stt) {
      // if this isn't the first row, close the last row
      if ($midnight != 0) {
        $page_content .= '</td></tr>';
      }
      $page_content .= ' <tr> <td class="table-label">' . date('n/j/Y', $stt) . '</td> <td>';
      // midnight on the day after the start time
      $midnight = mktime(0, 0, 0, date('n', $stt), date('j', $stt) + 1, date('Y', $stt));
    }
    // write shift time in form e.g. 0900 -1300 Slot Name
    $page_content .= '<p>' . date('Hi', $stt) . ' - ' . date('Hi', $ett) . ' ' . $row->display_name . '</p>';
  }
  $page_content .= '</tbody></table>';
  if (!$has_content) {
    $page_content .= t("No shifts to display");
  }
  $page_content .= '<p><strong>' . t('Total duty taken by [ ') . '<i>' . $volunteer . '</i>' . (' ]: ') . '</strong>' .
    floor($total_duty / 3600) .' ' . t('hours') . ' ' .
    floor(($total_duty % 3600) / 60) .' '. t('minutes') . '</p>';
  return _coop_shift_scheduler_wrap_content($page_content);
}

/***** NEW COOP SHIFT SCHEDULER FUNCTIONS ****/
 
/**
 *
 * Define the apperance of the admin_committee page.
 * If a committee_id is specified in url (e.g. admin/settings/coop_shift_scheduler/committee/4),
 * this basically just renders coop_shift_scheduler_admin_committee_form. Otherwise
 * it shows a table of all the defined committee with links to perform admin tasks
 * specifically for each slot.
 *
 * @ingroup admin
 */
function coop_shift_scheduler_admin_committee() {
	$output = '';
	$rows = array();
  if (!arg(4)) {
    $header = array(
      t('Name'),
      array(
        'data'    => t('Operations'),
        'colspan' => 2,
      ),
    );
    $result = db_query("SELECT 'committee_id',   'name', 'start_datetime', 'end_datetime' FROM {coop_shift_scheduler_committee} ORDER BY name");
    foreach ($result as $row){
			if ($row->slot_type ==0){
      	$edit_default_shifts = l(t('edit default shifts'), 'admin/settings/coop_shift_scheduler/default_shifts/' . $row->slot_id);
			}
			else {
				$edit_default_shifts = t('edit default shifts');
			}
      $rows[] = array(
        $row->display_name,
        l(t('edit slot'), 'admin/settings/coop_shift_scheduler/slot/' . $row->slot_id),
        $edit_default_shifts,
      );
	   
    }
	if($rows != NULL){
	  $form['table'] = array(
		'#value' => theme('table', array('header' => $header, 'rows' => $rows))
	  );
	  $output .= theme('table', array('header' => $header, 'rows' => $rows));
	}
  }
  $form = drupal_get_form('coop_shift_scheduler_admin_committee_form');//returns array
  $output .= drupal_render($form);
  return $output;
}
/**
 * Form builder for changing slot roles.
 *
 * @see coop_shift_scheduler_admin_slot_validate()
 * @see coop_shift_scheduler_admin_slot_submit()
 *
 *
 * @ingroup forms
 * @ingroup admin
 */
function coop_shift_scheduler_admin_committee_form() {
  // Takes the 5th argument on the drupal path.
  // e.g. takes 4 from admin/settings/coop_shift_scheduler/committee/4
  $slot_id = arg(4);
  if ($slot_id) {   
	$row_query = db_query("SELECT * FROM {coop_shift_scheduler_committee} WHERE committee_id = :slotid", array(':slotid' => $slot_id));	
    foreach ($row_query as $row){
    // display the edit slot form
    $form['name'] = array(
      '#title'         => t('committee name'),
      '#type'          => 'textfield',
      '#size'          => 32,
      '#maxlength'     => 64,
      '#default_value' => $row->display_name,
    );
    $form['status'] = array(
      '#type'          => 'radios',
      '#title'         => t('Status'),
      '#default_value' => $row->status,
      '#options'       => array(
        t('Active'),
        t('Deactivated'),
      ),
    );
		/*$slot_type_instructions = t('"Repeating" - The slot repeats on a weekly or daily basis. You set "Default Shifts", which will be added to the schedule using the "Add Days" feature. "Event" - The slot only needs to be filled during certain special events. Shifts for this slot will be created one at a time using the "Create Shifts for Events" feature.');
		$form['type'] = array(
			'#title'       => t('Slot type'),
			'#type'        => 'radios',
			'#default_value'=>$row->slot_type,
			'#description' => $slot_type_instructions,
			'#options'     => array(
				t('Repeating'),
				t('Event'),
			),
		);*/
    $instructions = t('In order for a user to take a shift in a particular slot, the user must be assinged a role that is eligible for that slot. The roles  used are the same roles that drupal uses to assign permissions.  Use this form to define which roles are eligible to take which slots. Add a role using the New Eligible Role menu. To remove a role, simply change to to a blank.');
    $form['instructions'] = array(
      '#type'        => 'item',
      '#title'       => t('Eligibility instructions'),
      '#description' => $instructions,
    );
    }
    // Get a list of all rows and put them in an array indexed by their rid
    $role_array = array();
    $role_result = db_query("SELECT rid, name FROM {role} ORDER BY rid");
    foreach ($role_result as $role_row){
      $role_array[$role_row->rid] = $role_row->name;
    }
    // anonymous users can't be assigned shifts
    $role_array[1] = '';
    // generate a form item for each role already eligible for this slot
    $i = 1;	
    $result = db_query("SELECT r.rid, r.name FROM {coop_shift_scheduler_slot_roles} AS sssr INNER JOIN {role} AS r ON sssr.rid = r.rid WHERE sssr.slot_id = :slot_id ORDER BY r.name", array(':slot_id' => $slot_id));
    foreach ($result as $row){		
      $form[$i -1] = array(
        '#type'          => 'select',
        '#title'         => t('Eligible Role !number', array('!number' => $i)),
        '#options'       => $role_array,
        '#default_value' => $row->rid,
      );
      $i = $i + 1;
    }
    // an extra row to add another eligible role
    $form[$i -1] = array(
      '#type'            => 'select',
      '#title'           => t('New eligible role'),
      '#description'     => t('To add a new eligible role, select one from this menu.'),
      '#options'         => $role_array,
    );
    $form['num_eligible'] = array(
      '#type'            => 'value',
      '#value'           => $i - 1,
    );
    $form['slot_id'] = array(
      '#type'            => 'value',
      '#value'           => $slot_id,
    );
	$form['actions'] = array('#type' => 'actions');
    $form['actions']['submit'] = array(
      '#type'            => 'submit',
      '#value'           => t('Save slot'),
    );
    $form['actions']['delete'] = array(
      '#type'            => 'submit',
      '#value'           => t('Delete slot'),
    );
  }
  // If you aren't editing a particular slot, assume we're creating a new one
  else {
    $form['name'] = array(
      '#title'           => 'Committee Name',
      '#type'            => 'textfield',
      '#size'            => 52,
      '#maxlength'       => 64,
    );
 
    $form['start_datetime'] = array(
      '#title'           => 'Committee Start Time',
      '#type'            => 'textfield',
      '#size'            => 52,
      '#maxlength'       => 64,
    );
    $form['end_datetime'] = array(
      '#title'           => 'Committee End Time',
      '#type'            => 'textfield',
      '#size'            => 52,
      '#maxlength'       => 64,
    );

    
	$form['actions'] = array('#type' => 'actions');
    $form['actions']['submit'] = array(
      '#type'            => 'submit',
      '#value'           => t('Add Committee'),
    );
  }
 // Provide a default date in the format YYYY-MM-DD HH:MM:SS.
  $date = '2008-12-31 00:00:00';

  // Provide a format using regular PHP format parts (see documentation on php.net).
  // If you're using a date_select, the format will control the order of the date parts in the selector,
  // rearrange them any way you like. Parts left out of the format will not be displayed to the user.
  $format = 'Y-m-d H';

  $form['date2'] = array(
     '#type' => 'date_select', // types 'date_text' and 'date_timezone' are also supported. See .inc file.
     '#title' => 'select a date',
     '#default_value' => $date,
     '#date_format' => $format,
     '#date_label_position' => 'within', // See other available attributes and what they do in date_api_elements.inc
     '#date_timezone' => 'America/Chicago', // Optional, if your date has a timezone other than the site timezone.
     '#date_increment' => 15, // Optional, used by the date_select and date_popup elements to increment minutes and seconds.
     '#date_year_range' => '-3:+3', // Optional, used to set the year range (back 3 years and forward 3 years is the default).
  );
  $form['#submit'][] = 'coop_shift_scheduler_admin_committee_submit';
  $form['#validate'][] = 'coop_shift_scheduler_admin_committee_validate';
  return $form;
}

/**
* Your form builder.
*/
function mymodule_form($form_state) {
  $form = array();

  // [...snip...] add many fields to your form

  // Creating the date/time element starts here

  // Provide a default date in the format YYYY-MM-DD HH:MM:SS.
  $date = '2008-12-31 00:00:00';

  // Provide a format using regular PHP format parts (see documentation on php.net).
  // If you're using a date_select, the format will control the order of the date parts in the selector,
  // rearrange them any way you like. Parts left out of the format will not be displayed to the user.
  $format = 'Y-m-d H:i';

  $form['date2'] = array(
     '#type' => 'date_select', // types 'date_text' and 'date_timezone' are also supported. See .inc file.
     '#title' => 'select a date',
     '#default_value' => $date,
     '#date_format' => $format,
     '#date_label_position' => 'within', // See other available attributes and what they do in date_api_elements.inc
     '#date_timezone' => 'America/Chicago', // Optional, if your date has a timezone other than the site timezone.
     '#date_increment' => 15, // Optional, used by the date_select and date_popup elements to increment minutes and seconds.
     '#date_year_range' => '-3:+3', // Optional, used to set the year range (back 3 years and forward 3 years is the default).
  );

  // [...snip...] more fields, including the 'submit' button.

  return $form;
}

/***** END - NEW COOP SHIFT SCHEDULER FUNCTIONS ****/


/**** ADMINISTRATIVE FEATURES *******

 Everything beyond this point defines administrative features for
 customizing the shift schedule to a particular organization.  For example,
 these functions will define the pages that allow you to create new slots,
 create default times for each of the slots, rename slots, delete slots,
 deactivate slots, etc.

 */

/**
 *
 * Define the apperance of the admin_slots page.
 * If a slot_id is specified in url (e.g. admin/settings/coop_shift_scheduler/slot/4),
 * this basically just renders coop_shift_scheduler_admin_slot_form. Otherwise
 * it shows a table of all the defined slots with links to perform admin tasks
 * specifically for each slot.
 *
 * @ingroup admin
 */
function coop_shift_scheduler_admin_slots() {
	$output = '';
	$rows = array();
  if (!arg(4)) {
    $header = array(
      t('Name'),
      array(
        'data'    => t('Operations'),
        'colspan' => 2,
      ),
    );
    $result = db_query("SELECT slot_id, display_name, slot_type FROM {coop_shift_scheduler_slots} ORDER BY display_name");
    foreach ($result as $row){
			if ($row->slot_type ==0){
      	$edit_default_shifts = l(t('edit default shifts'), 'admin/settings/coop_shift_scheduler/default_shifts/' . $row->slot_id);
			}
			else {
				$edit_default_shifts = t('edit default shifts');
			}
      $rows[] = array(
        $row->display_name,
        l(t('edit slot'), 'admin/settings/coop_shift_scheduler/slot/' . $row->slot_id),
        $edit_default_shifts,
      );
	   
    }
	if($rows != NULL){
	  $form['table'] = array(
		'#value' => theme('table', array('header' => $header, 'rows' => $rows))
	  );
	  $output .= theme('table', array('header' => $header, 'rows' => $rows));
	}
  }
  $form = drupal_get_form('coop_shift_scheduler_admin_slot_form');//returns array
  $output .= drupal_render($form);
  return $output;
}

/**
 * Form builder for changing slot roles.
 *
 * @see coop_shift_scheduler_admin_slot_validate()
 * @see coop_shift_scheduler_admin_slot_submit()
 *
 *
 * @ingroup forms
 * @ingroup admin
 */
function coop_shift_scheduler_admin_slot_form() {
  // Takes the 5th argument on the drupal path.
  // e.g. takes 4 from admin/settings/coop_shift_scheduler/slot/4
  $slot_id = arg(4);
  if ($slot_id) {   
	$row_query = db_query("SELECT * FROM {coop_shift_scheduler_slots} WHERE slot_id = :slotid", array(':slotid' => $slot_id));	
    foreach ($row_query as $row){
    // display the edit slot form
    $form['name'] = array(
      '#title'         => t('Slot name'),
      '#type'          => 'textfield',
      '#size'          => 32,
      '#maxlength'     => 64,
      '#default_value' => $row->display_name,
    );
    $form['status'] = array(
      '#type'          => 'radios',
      '#title'         => t('Status'),
      '#default_value' => $row->status,
      '#options'       => array(
        t('Active'),
        t('Deactivated'),
      ),
    );
		$slot_type_instructions = t('"Repeating" - The slot repeats on a weekly or daily basis. You set "Default Shifts", which will be added to the schedule using the "Add Days" feature. "Event" - The slot only needs to be filled during certain special events. Shifts for this slot will be created one at a time using the "Create Shifts for Events" feature.');
		$form['type'] = array(
			'#title'       => t('Slot type'),
			'#type'        => 'radios',
			'#default_value'=>$row->slot_type,
			'#description' => $slot_type_instructions,
			'#options'     => array(
				t('Repeating'),
				t('Event'),
			),
		);
    $instructions = t('In order for a user to take a shift in a particular slot, the user must be assinged a role that is eligible for that slot. The roles  used are the same roles that drupal uses to assign permissions.  Use this form to define which roles are eligible to take which slots. Add a role using the New Eligible Role menu. To remove a role, simply change to to a blank.');
    $form['instructions'] = array(
      '#type'        => 'item',
      '#title'       => t('Eligibility instructions'),
      '#description' => $instructions,
    );
    }
    // Get a list of all rows and put them in an array indexed by their rid
    $role_array = array();
    $role_result = db_query("SELECT rid, name FROM {role} ORDER BY rid");
    foreach ($role_result as $role_row){
      $role_array[$role_row->rid] = $role_row->name;
    }
    // anonymous users can't be assigned shifts
    $role_array[1] = '';
    // generate a form item for each role already eligible for this slot
    $i = 1;	
    $result = db_query("SELECT r.rid, r.name FROM {coop_shift_scheduler_slot_roles} AS sssr INNER JOIN {role} AS r ON sssr.rid = r.rid WHERE sssr.slot_id = :slot_id ORDER BY r.name", array(':slot_id' => $slot_id));
    foreach ($result as $row){		
      $form[$i -1] = array(
        '#type'          => 'select',
        '#title'         => t('Eligible Role !number', array('!number' => $i)),
        '#options'       => $role_array,
        '#default_value' => $row->rid,
      );
      $i = $i + 1;
    }
    // an extra row to add another eligible role
    $form[$i -1] = array(
      '#type'            => 'select',
      '#title'           => t('New eligible role'),
      '#description'     => t('To add a new eligible role, select one from this menu.'),
      '#options'         => $role_array,
    );
    $form['num_eligible'] = array(
      '#type'            => 'value',
      '#value'           => $i - 1,
    );
    $form['slot_id'] = array(
      '#type'            => 'value',
      '#value'           => $slot_id,
    );
	$form['actions'] = array('#type' => 'actions');
    $form['actions']['submit'] = array(
      '#type'            => 'submit',
      '#value'           => t('Save slot'),
    );
    $form['actions']['delete'] = array(
      '#type'            => 'submit',
      '#value'           => t('Delete slot'),
    );
  }
  // If you aren't editing a particular slot, assume we're creating a new one
  else {
    $form['name'] = array(
      '#type'            => 'textfield',
      '#size'            => 52,
      '#maxlength'       => 64,
    );
	$form['actions'] = array('#type' => 'actions');
    $form['actions']['submit'] = array(
      '#type'            => 'submit',
      '#value'           => t('Add slot'),
    );
  }

  $form['#submit'][] = 'coop_shift_scheduler_admin_slot_submit';
  $form['#validate'][] = 'coop_shift_scheduler_admin_slot_validate';
  return $form;
}

/**
 * Form validation handler for coop_shift_scheduler_admin_slot_form()
 *
 * @see coop_shift_scheduler_admin_slot_form()
 * @see coop_shift_scheduler_admin_slot_submit()
 *
 *
 * @ingroup admin
 */
function coop_shift_scheduler_admin_slot_validate($form, &$form_state) {
  if ($form_state['values']['name']) {
    // Edit slot
    if ($form_state['values']['op'] == t('Save slot')) {
      // check for duplicate names
      if (db_query("SELECT * FROM {coop_shift_scheduler_slots} WHERE display_name = :displayname AND slot_id <> :slotid", array(
	':displayname' => $form_state['values']['name'], 
	':slotid' => $form_state['values']['slot_id']))->rowCount() > 0) {
        form_set_error('name', t('The slot name %name already exists. Please choose another slot name.', array('%name' => $form_state['values']['name'])));
      }
     
	  // check for duplicate eligible roles
      $seen_array = array();
      for ($i = 1; $i <= $form_state['values']['num_eligible']; $i++) {
        $rid = $form_state['values'][$i - 1];
        // if the rid has already been seen and isn't the empty role
		if (isset($seen_array[$rid]) && ($rid != 1)) {
		  form_set_error($i - 1, t('Roles may not appear more than once.'));
		}
        $seen_array[$rid] = TRUE;
      }
    }
    // Add slot
    if ($form_state['values']['op'] == t('Add slot')) {
      // check that there isn't already a slot with that name 
      if (db_query("SELECT * FROM {coop_shift_scheduler_slots} WHERE display_name = :displayname", array(':displayname' => $form_state['values']['name']))->rowCount() > 0) {
        form_set_error('name', t('The slot name %name already exists. Please choose another slot name.', array('%name' => $form_state['values']['name'])));
      }
    }
  }
  else {
    form_set_error('name', t('You must specify a valid slot name.'));
  }
}

/**
 * Form submission handler for coop_shift_scheduler_admin_slot_form()
 *
 * @see coop_shift_scheduler_admin_slot_form()
 * @see coop_shift_scheduler_admin_slot_validate()
 *
 *
 * @ingroup admin
 */
function coop_shift_scheduler_admin_slot_submit($form, &$form_state) {
  if ($form_state['values']['op'] == t('Save slot')) {
  	db_update('coop_shift_scheduler_slots')
			->fields(array(
				'status'      => $form_state['values']['status'],
				'display_name'=> $form_state['values']['name'],
				'slot_type'   => $form_state['values']['type'],
				)
			 )
			->condition('slot_id', $form_state['values']['slot_id'], '=')
			->execute();
	
	db_delete('coop_shift_scheduler_slot_roles')
		->condition('slot_id', $form_state['values']['slot_id'], '=')
		->execute();
    // update eligible roles
    for ($i = 0; $i < $form_state['values']['num_eligible'] + 1; $i++) {
      if ($form_state['values'][$i] != 1) {
        $new_record = array(
          'slot_id' => $form_state['values']['slot_id'],
          'rid'     => $form_state['values'][$i],
        );
        drupal_write_record('coop_shift_scheduler_slot_roles', $new_record);
      }
    }
    drupal_set_message(t('The slot has been updated.'));
	$form_state['redirect'] = array('admin/settings/coop_shift_scheduler');
  }
  elseif ($form_state['values']['op'] == t('Delete slot')) {
  	db_delete('coop_shift_scheduler_slots')
		->condition('slot_id', $form_state['values']['slot_id'], '=')
		->execute();
  	db_delete('coop_shift_scheduler_shifts')
		->condition('slot_id', $form_state['values']['slot_id'], '=')
		->execute();
	db_delete('coop_shift_scheduler_slot_times')
		->condition('slot_id', $form_state['values']['slot_id'], '=')
		->execute();
    $form_state['redirect'] = array('admin/settings/coop_shift_scheduler/slot');
    drupal_set_message(t('The slot and all of its associated shifts have been deleted.'));
  }
  elseif ($form_state['values']['op'] == t('Add slot')) {
    $new_record = array(
      'display_name' => $form_state['values']['name'],
      'status' => 0,
      'slot_type' => 0,
    );
    drupal_write_record('coop_shift_scheduler_slots', $new_record);
    $slot_id = db_query("SELECT slot_id FROM {coop_shift_scheduler_slots} WHERE display_name = :displayname", array(':displayname' => $form_state['values']['name']))->fetchField();
    // by default allow any authenticated user to be placed in a slot
    $new_roles_record = array(
      'slot_id' => $slot_id,
      'rid' => 2,
    );
    drupal_write_record('coop_shift_scheduler_slot_roles', $new_roles_record);
    drupal_set_message(t('The slot has been added.'));
  }
}

/**
 * Define the appearance of the admin_default_shifts page.
 *
 * @ingroup admin
 */
function coop_shift_scheduler_admin_default_shifts() {
  $out = drupal_get_form('coop_shift_scheduler_admin_default_shifts_form');
  return drupal_render($out);
}

/**
 * Form builder for admin default shifts.
 *
 * @see coop_shift_scheduler_admin_default_shifts_validate()
 * @see coop_shift_scheduler_admin_default_shifts_submit()
 *
 * @todo Explain what this function does.
 *   Explain indices in start_time[].
 *   Optimize the loops.
 *
 * @ingroup forms
 * @ingroup admin
 */
function coop_shift_scheduler_admin_default_shifts_form($form_state) {
  $slot_id = arg(4);
  $result = db_query("SELECT slot_time_id, start_time, end_time, monday, tuesday, wednesday, thursday, friday, saturday, sunday FROM {coop_shift_scheduler_slot_times} WHERE slot_id = :sid", array(':sid' => $slot_id));
  $form = array();
  $instructions = t('Times should be in military format (e.g. 0800, 1234). To add a shift, fill in both the start time and the end time under New Shift.  If the end time is before the start time, then the end time is taken to be on the following day.  To delete a shift, delete both the start time and end time of that shift.');
  $form['instructions'] = array(
    '#type' => 'item',
    '#title' => t('Instructions'),
    '#description' => $instructions,
  );
  $last_row = NULL;
  $i = 1;
  foreach ($result as $row){
    $form[$i -1] = array(
      '#type' => 'item',
      '#title' => t('Default shift !number', array('!number' => $i)),
      '#tree' => TRUE,
    );
    $weekday_default = array();
    // create a helper on every iteration of the while loop?
    $weekday_default_helper = array(
      1 => (int) $row->monday,
      2 => (int) $row->tuesday,
      3 => (int) $row->wednesday,
      4 => (int) $row->thursday,
      5 => (int) $row->friday,
      6 => (int) $row->saturday,
      7 => (int) $row->sunday,
    );
    for ($j = 1; $j < 8; $j++) {
      if ($weekday_default_helper[$j] == 1) {
        $weekday_default[] = $j;
      }
    }
    $form[$i -1]['weekday'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Days of week'),
      '#description' => t('The days of the week for the shift.'),
      '#options' => array(
        1 => t('Monday'),
        2 => t('Tuesday'),
        3 => t('Wednesday'),
        4 => t('Thursday'),
        5 => t('Friday'),
        6 => t('Saturday'),
        7 => t('Sunday'),
      ),
      '#default_value' => $weekday_default,
      '#multicolumn'   => array(
        'width' => 7,
      ),
    );
    $form[$i -1]['slot_time_id'] = array(
      '#type'  => 'value',
      '#value' => $row->slot_time_id,
    );
    $form[$i -1]['start_time'] = array(
      '#type'          => 'textfield',
      '#title'         => t('Start time'),
      '#size'          => 10,
      '#maxlength'     => 4,
      '#default_value' => ($row->start_time[11] . $row->start_time[12] . $row->start_time[14] . $row->start_time[15]),
    );
    $form[$i -1]['end_time'] = array(
      '#type'          => 'textfield',
      '#title'         => t('End time'),
      '#size'          => 10,
      '#maxlength'     => 4,
      '#default_value' => ($row->end_time[11] . $row->end_time[12] . $row->end_time[14] . $row->end_time[15]),
    );
    $i = $i + 1;
    $last_row = $row;
  }
  $form['slot_id'] = array(
    '#type'  => 'value',
    '#value' => $slot_id,
  );
  // pass the number of slots that already exist to the form-processing functions
  $form['num_defined'] = array(
    '#type'  => 'value',
    '#value' => $i - 1,
  );
  $form['new_time'] = array(
    '#type'        => 'item',
    '#name'        => 'new_time',
    '#title'       => t('New time'),
    '#description' => t('Fill in times here to create a new default time.'),
    '#tree'        => TRUE,
  );

  $weekday_default = array();
  for ($j = 1; $j < 8; $j++) {
    if (isset($weekday_default_helper[$j])) {
      $weekday_default[] = $j;
    }
  }
  $form['new_time']['weekday'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Days of week'),
    '#description' => t('The days of the week for the shift'),
    '#options' => array(
      1 => t('Monday'),
      2 => t('Tuesday'),
      3 => t('Wednesday'),
      4 => t('Thursday'),
      5 => t('Friday'),
      6 => t('Saturday'),
      7 => t('Sunday'),
    ),
    '#default_value' => $weekday_default,
    '#multicolumn'   => array(
      'width' => 7,
    ),
  );
  $form['new_time']['start_time'] = array(
    '#type'      => 'textfield',
    '#title'     => t('Start time'),
    '#size'      => 10,
    '#maxlength' => 4,
  );
  $form['new_time']['end_time'] = array(
    '#type'      => 'textfield',
    '#title'     => t('End time'),
    '#size'      => 10,
    '#maxlength' => 4,
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Update'),
  );
  $form['#submit'][]   = 'coop_shift_scheduler_admin_default_shifts_submit';
  $form['#validate'][] = 'coop_shift_scheduler_admin_default_shifts_validate';

  return $form;
}

/**
 * Form validation handler for coop_shift_scheduler_admin_default_shifts_form().
 *
 * @see coop_shift_scheduler_admin_default_shifts_form()
 * @see coop_shift_scheduler_admin_default_shifts_submit()
 *
 * @todo Explain what this function does.
 *
 * @ingroup admin
 */
function coop_shift_scheduler_admin_default_shifts_validate($form, &$form_state) {
  for ($i = 0; $i < (int) $form_state['values']['num_defined']; $i++) {
    $st = $form_state['values'][$i]['start_time'];
    $et = $form_state['values'][$i]['end_time'];

    if (!((drupal_strlen($st) == drupal_strlen($et)) && (drupal_strlen($st) == 4 || drupal_strlen($st) == 0))) {
      form_set_error($i, t('Both the start time and the end time must either be blank or full 4-number military times (e.g. 0900 or 1354)'));
    }
  }
  // Check that either:
  // neither or both of the times for a new slot are filled in
  if (drupal_strlen($form_state['values']['new_time']['start_time']) == 4
          ^ drupal_strlen($form_state['values']['new_time']['end_time']) == 4) {
    form_set_error('new_time', t('To add a new default shift, you must enter values for both its start and end times'));
  }

  //check that the new default shift does not overlap with any of the old ones
  if (drupal_strlen($form_state['values']['new_time']['start_time']) == 4 &&
    drupal_strlen($form_state['values']['new_time']['end_time']) == 4) {
    $nss = $form_state['values']['new_time']['start_time']; //new start string
    $nes = $form_state['values']['new_time']['end_time']; //new end string
    $nst = mktime((int) ($nss[0] . $nss[1]), (int) ($nss[2] . $nss[3])); //new start time
    $net = mktime((int) ($nes[0] . $nes[1]), (int) ($nes[2] . $nes[3])); //new end time
    for ($i = 0; $i < (int) $form_state['values']['num_defined']; $i++) {
      $overlapping_days = FALSE;
      foreach ($form_state['values'][$i]['weekday'] as $day_num) {
        foreach ($form_state['values']['new_time']['weekday'] as $new_day_num) {
          if ($day_num == $new_day_num && $day_num != 0) {
            $overlapping_days = TRUE;
            break;
          }
        }
        if ($overlapping_days) {
          break;
        }
      }
      $oss = $form_state['values'][$i]['start_time']; //old start string
      $oes = $form_state['values'][$i]['end_time']; //old end string
      $ost = mktime((int) ($oss[0] . $oss[1]), (int) ($oss[2] . $oss[3])); //old start time
      $oet = mktime((int) ($oes[0] . $oes[1]), (int) ($oes[2] . $oes[3])); //new end time
      if ((( $nst < $oet  && $nst > $ost ) || ($net < $oet && $net > $ost)) && $overlapping_days ) {
        form_set_error($i, t('The new default shift cannot overlap with any of the old default shifts.'));
      }
    }
  }
}

/**
 * Form submission handler for coop_shift_scheduler_admin_default_shifts_form().
 *
 * @see coop_shift_scheduler_admin_default_shifts_form()
 * @see coop_shift_scheduler_admin_default_shifts_validate()
 *
 * @todo Explain what this function does.
 *   Explain $weekday stuff.
 *
 * @ingroup admin
 */
function coop_shift_scheduler_admin_default_shifts_submit($form, &$form_state) {
  $slot_id = (int) $form_state['values']['slot_id'];
  // update previously defined times
  for ($i = 0; $i < (int) $form_state['values']['num_defined']; $i++) {
    $slot_time_id = (int) ($form_state['values'][$i]['slot_time_id']);
    $ss = $form_state['values'][$i]['start_time'];
    $es = $form_state['values'][$i]['end_time'];
    // If both the begin and end time are blanked, delete the default shift
    if (drupal_strlen($ss) == 0 && drupal_strlen($es) == 0) {
      db_delete('coop_shift_scheduler_slot_times')
	  	->condition('slot_time_id', $slot_time_id)
		->execute();
      drupal_set_message(t('Default shift was deleted.'));
    }else{
		$start_time = mktime((int) ($ss[0] . $ss[1]), (int) ($ss[2] . $ss[3]));
		$end_time   = mktime((int) ($es[0] . $es[1]), (int) ($es[2] . $es[3]));
	
		$weekday = $form_state['values'][$i]['weekday'];
		for ($j = 1; $j < 8; $j++) {
		  if ($weekday[$j] == $j) {
			$weekday[$j] = 1;
		  }
		  else {
			$weekday[$j] = 0;
		  }
		}
		db_update('coop_shift_scheduler_slot_times')
			->fields(array('start_time' => date("Y-m-d H:i:00", $start_time), 'end_time' => date("Y-m-d H:i:00", $end_time), 'monday' => $weekday[1], 'tuesday' => $weekday[2], 'wednesday' => $weekday[3], 'thursday' => $weekday[4], 'friday' => $weekday[5], 'saturday' => $weekday[6], 'sunday' => $weekday[7]))
			->condition('slot_time_id', $slot_time_id, '=')
			->execute();
		drupal_set_message('Shift Updated');
	}
  }
  
  // Add new default shift
  // check that both begin and end time of new shift are filled in
  if (drupal_strlen($form_state['values']['new_time']['start_time']) == 4
          && drupal_strlen($form_state['values']['new_time']['end_time']) == 4) {
    // get the strings for the start and end times from the form
    // ss = start string
    $ss = $form_state['values']['new_time']['start_time'];
    $es = $form_state['values']['new_time']['end_time'];
    // what is the purpose of this loop?
    $weekday = $form_state['values']['new_time']['weekday'];
    for ($j = 1; $j < 8; $j++) {
      if ($weekday[$j] == $j) {
        $weekday[$j] = 1;
      }
      else {
        $weekday[$j] = 0;
      }
    }
    // convert strings to seconds after the unix epoch
    // the day is arbitrarily chosen to be the first day of the unix epoch
    $start_time = mktime((int) ($ss[0] . $ss[1]), (int) ($ss[2] . $ss[3]));
    $end_time = mktime((int) ($es[0] . $es[1]), (int) ($es[2] . $es[3]));
    $new_record = array(
      'start_time' => date("Y-m-d H:i:00", $start_time),
      'end_time'   => date("Y-m-d H:i:00", $end_time),
      'slot_id'    => $slot_id,
      'monday'     => $weekday[1],
      'tuesday'    => $weekday[2],
      'wednesday'  => $weekday[3],
      'thursday'   => $weekday[4],
      'friday'     => $weekday[5],
      'saturday'   => $weekday[6],
      'sunday'     => $weekday[7],
    );
    drupal_write_record('coop_shift_scheduler_slot_times', $new_record);
    drupal_set_message(t('New default shift added.'));
  }
}

/**
 *
 * @todo Explain what this function does.
 *
 * @ingroup admin
 */
function coop_shift_scheduler_configure() {
  $out = drupal_get_form('coop_shift_scheduler_configure_form');
  return drupal_render($out);
}

/**
 * Form builder for configuration.
 *
 * @see coop_shift_scheduler_configure_submit()
 *
 * @todo Explain what this function does.
 *
 * @ingroup forms
 * @ingroup admin
 */
function coop_shift_scheduler_configure_form($form_state) {
  $form = array();
  $form['coop_shift_scheduler_claim_open_shifts'] = array(
    '#name'          => 'claim_open_shifts',
    '#type'          => 'radios',
    '#title'         => t('Claim open shifts'),
    '#description'   => t('If enabled, any authenticated user with access to the shift schedule can claim any open shift on the schedule.'),
    '#default_value' => variable_get('coop_shift_scheduler_claim_open_shifts', 0),
    '#options'       => array(
      t('Disabled'),
      t('Enabled'),
    ),
  );
  $form['coop_shift_scheduler_relinquish_shifts'] = array(
    '#name'          => 'relinquish_shifts',
    '#type'          => 'radios',
    '#title'         => t('Relinquish shifts'),
    '#description'   => t('If enabled, any authenticated user with access to the shift schedule can claim relinquish a shift assigned to him/her, making it an open shift.'),
    '#default_value' => variable_get('coop_shift_scheduler_relinquish_shifts', 0),
    '#options'       => array(
      t('Disabled'),
      t('Enabled'),
    ),
  );
  /*
   $form['coop_shift_scheduler_link_to_profile'] = array(
   '#name'=> 'link_to_profile',
   '#type' => 'radios',
   '#title' => t('Link User Names To Profiles'),
   '#description' => t('If enabled, the user names displayed on the shift schedule will link to user profiles instead of the same destination as the shift time'),
   '#default_value' => variable_get('coop_shift_scheduler_link_to_profile', 0),
   '#options' => array(
   t('Disabled'),
   t('Enabled'),
   ),
   );
   */

  return system_settings_form($form);
}

/**
 * Form submission handler for coop_shift_scheduler_create event_form().
 *
 * @see coop_shift_scheduler_create event_shifts_form()
 *
 *
 * @ingroup admin
 */
function coop_shift_scheduler_create_event_shifts() {
	$out = drupal_get_form('coop_shift_scheduler_create_event_shifts_form');
	return drupal_render($out);
}

/**
 * This form asks for the date of the event plus start and end times
 * Then asks which slots are required
 * The roles checkboxes for this are dynamically filled from a query
 * on coop_shift_scheduler_slots specifically the SELECT statement
 * slot-types = 1 which signifies an event only slot as opposed to a
 * recurring one (which would be slot-type = 0
 * TODO This could be expanded to signify other sloy types
 * @see coop_shift_scheduler_create_event_shifts_validate()
 * @see coop_shift_scheduler_create_event_shifts_form_submit()
 *
 */
function coop_shift_scheduler_create_event_shifts_form($form_state) {
	$result = db_query("SELECT slot_id, display_name FROM {coop_shift_scheduler_slots} WHERE slot_type >= :sss_slottype AND status = :sss_status ORDER BY display_name", array(
		':sss_slottype' => 1,
		':sss_status' => 0,
	));
	$options = array();
	foreach($result as $row){
		$options[$row->slot_id] = $row->display_name;
	}

	$form = array();
	// British/European date format since I am accross the pond	
	$date_format = 'd-m-Y';
	$form['event_date'] = array(
    '#type'        => 'date',
    '#title'       => t('Event date'),
    '#date_format' => $date_format,
    '#required'    => TRUE,
    '#description' => t('The date of the event to be created on the shift rota.'),
	);
	$form['start_time'] = array(
    '#type'        => 'textfield',
    '#title'       => t('start time'),
    '#size'        => 10,
    '#maxlength'   => 4,
    '#required'    => TRUE,
    '#description' => t('The start time of the shift.'),
	);
	$form['end_time'] = array(
    '#type'        => 'textfield',
    '#title'       => t('end time'),
    '#size'        => 10,
    '#maxlength'   => 4,
    '#required'    => TRUE,
    '#description' => t('The end time of the shift.'),
	);
	$form['slot_id'] = array(
    '#type'        => 'checkboxes',
  	'#title'       => t('Slots for event'),
    '#description' => t('Please choose which slots need to be filled during this time.'),
    '#options'     => $options,
    '#required'    => TRUE,
	);

	// Use the slot_tod variable to decide if the form is completed
	$form['submit'] = array(
    '#type'        => 'submit',
    '#value'       => 'Submit',
	);
	$form['clear'] = array(
      '#type'      => 'submit',
      '#value'     => 'Reset form',
      '#validate'  => array('coop_shift_scheduler_create_event_shifts_form_clear'),
    );
    $form['#submit'][] = 'coop_shift_scheduler_create_event_shifts_form_submit';
    $form['#validate'][] = 'coop_shift_scheduler_create_event_shifts_form_validate';
    return $form;
}
/*
 * This merely clears the form when the reset form button is pressed
 */
function coop_shift_scheduler_create_event_shifts_form_clear($form, &$form_state) {
	unset ($form_state['values']);  // ensures fields are blank after reset
	// button is clicked
	unset ($form_state['storage']); // ensures the reset button removes the
	// new_name part

	$form_state['rebuild'] = TRUE;
}
/**
 * Form validation handler for coop_shift_scheduler_create_event_shifts_form().
 *
 * @see coop_shift_scheduler_create_event_shifts_form()
 * @see coop_shift_scheduler_create_event_shifts_form_submit()
 *
 * This validation handler checks the event shifts have not been created yet.
 *
 */
function coop_shift_scheduler_create_event_shifts_form_validate($form, &$form_state) {
	if (!empty($form_state['values']['event_date']) && !empty($form_state['values']['start_time']) && !empty($form_state['values']['end_time']) && !empty($form_state['values']['slot_id'])) {
		$ss         = $form_state['values']['start_time'];
		$es         = $form_state['values']['end_time'];
		$eventtdate = $form_state['values']['event_date'];
		$eventday   = $form_state['values']['event_date']['day'];
		$eventmon   = $form_state['values']['event_date']['month'];
		$eventyear  = $form_state['values']['event_date']['year'];
		$start_time = mktime((int) ($ss[0] . $ss[1]), (int) ($ss[2] . $ss[3]), (int) 0, (int) ($eventmon), (int) ($eventday), (int) ($eventyear));
		$end_time = mktime((int) ($es[0] . $es[1]), (int) ($es[2] . $es[3]), (int) 0, (int) ($eventmon), (int) ($eventday), (int) ($eventyear));
		$sts = date("Y-m-d H:i:00", $start_time); //start time string
		$ets = date("Y-m-d H:i:00", $end_time);//start time string
		// Check the database for a shift with the same slot_id that overlaps in time with the new
		// shift that we are trying to create. If you find one, show an error.
		foreach ($form_state['values']['slot_id'] as $slot_id) {
		  $query = db_query("SELECT * FROM {coop_shift_scheduler_shifts} WHERE slot_id = :slot_id AND ((start_time>=:start_time AND start_time<:end_time ) OR (end_time > :start_time AND end_time <= :end_time))", array(
		    ':slot_id' => $slot_id,
		    ':start_time' =>$sts,
		    ':end_time' =>$ets,
		    )
		  )->fetchField();
			if (!empty($query)){
			  form_set_error('start_time', t('Adding event shift failed because adding this shift results in the creation of duplicate shifts'));
			}
		}
	}else {
		form_set_error('start_time', t('Missing required values.'));
	}
}
/**
 * Form submit handler for coop_shift_scheduler_create_event_shifts_form().
 *
 * @see coop_shift_scheduler_create_event_shifts_form()
 * @see coop_shift_scheduler_create_event_shifts_form_validate()
 *
 * This submit handler checks the event shifts have not been created yet.
 * TODO Add functionality for overnight shifts. The necessary changes
 * plus simplification of the submit process (from add_days)
 * made this difficult so followed the KISS principle.
 */

function coop_shift_scheduler_create_event_shifts_form_submit($form, &$form_state) {
	$ss         = $form_state['values']['start_time'];
	$es         = $form_state['values']['end_time'];
	$eventtdate = $form_state['values']['event_date'];
	$eventday   = $form_state['values']['event_date']['day'];
	$eventmon   = $form_state['values']['event_date']['month'];
	$eventyear  = $form_state['values']['event_date']['year'];
	$start_time = mktime((int) ($ss[0] . $ss[1]), (int) ($ss[2] . $ss[3]), (int) 0, (int) ($eventmon), (int) ($eventday), (int) ($eventyear));
	$end_time   = mktime((int) ($es[0] . $es[1]), (int) ($es[2] . $es[3]), (int) 0, (int) ($eventmon), (int) ($eventday), (int) ($eventyear));
	foreach($form_state['values']['slot_id'] as $slot_id) {
		if ($slot_id != 0) {
			$new_record = array(
		  'slot_id' => $slot_id,
		  'start_time' => date("Y-m-d H:i:00", $start_time),
          'end_time' => date("Y-m-d H:i:00", $end_time),
			);
			//dpm($new_record);
			drupal_write_record('coop_shift_scheduler_shifts', $new_record);
		}
	}
	$form_state['redirect'] = array('coop_shift_scheduler');
}

/**
 * Implementation of hook_menu().
 *
 * @todo Find a way to get something as a normal menu item.
 */
function coop_shift_scheduler_menu() {
  $items = array();
  $items['coop_shift_scheduler'] = array(
    'title'            => 'Coop Shift Schedule',
    'page callback'    => 'coop_shift_scheduler_schedule',
    'access arguments' => array('access coop shift schedule'),
    'type'             => MENU_NORMAL_ITEM,
  );
  $items['coop_shift_scheduler/add_days'] = array(
    'title'            => 'Add days',
    'page callback'    => 'coop_shift_scheduler_add_days',
    'access arguments' => array('add to coop shift schedule'),
    'type'             => MENU_NORMAL_ITEM,
  );
  $items['coop_shift_scheduler/change_shift'] = array(
    'title'            => 'Change coop shift',
    'page callback'    => 'coop_shift_scheduler_change_shift',
    'access arguments' => array('edit coop shift schedule'),
    'type'             => MENU_CALLBACK,
  );
  $items['coop_shift_scheduler/old_shifts'] = array(
    'title'            => 'Old shifts',
    'page callback'    => 'coop_shift_scheduler_old_shifts',
    'access arguments' => array('access coop shift schedule'),
    'type'             => MENU_NORMAL_ITEM,
  );
  $items['coop_shift_scheduler/old_shifts_results'] = array(
    'title'            => 'Old shifts',
    'page callback'    => 'coop_shift_scheduler_old_shifts_results',
    'access arguments' => array('access coop shift schedule'),
    'type'             => MENU_CALLBACK,
  );
  $items['coop_shift_scheduler/create_event_shifts'] = array(
    'title'            => 'Create Shifts for Events',
    'page callback'    => 'coop_shift_scheduler_create_event_shifts',
    'access arguments' => array('add to coop shift schedule'),
    'type'             => MENU_NORMAL_ITEM,
  );

  /* */
  $items['admin/settings/coop_shift_scheduler/committee'] = array(
    'title'            => 'Edit coop Shift Scheduler committees',
    'page callback'    => 'coop_shift_scheduler_admin_committee',
    'access arguments' => array('administer coop_shift_scheduler'),
    'type'             => MENU_NORMAL_ITEM,
  );
/* */  
/* */
  $items['admin/settings/coop_shift_scheduler/job'] = array(
    'title'            => '1Edit coop Shift Scheduler Jobs',
    'page callback'    => 'coop_shift_scheduler_admin_jobs',
    'access arguments' => array('administer coop_shift_scheduler'),
    'type'             => MENU_NORMAL_ITEM,
  );
/* */ 
/* */
  $items['admin/settings/coop_shift_scheduler/shift'] = array(
    'title'            => 'Edit coop Shift Scheduler Shift',
    'page callback'    => 'coop_shift_scheduler_admin_shifts',
    'access arguments' => array('administer coop_shift_scheduler'),
    'type'             => MENU_NORMAL_ITEM,
  );
/* */ 
  $items['admin/settings/coop_shift_scheduler/slot'] = array(
    'title'            => 'Edit coop Shift Scheduler slots',
    'page callback'    => 'coop_shift_scheduler_admin_slots',
    'access arguments' => array('administer coop_shift_scheduler'),
    'type'             => MENU_NORMAL_ITEM,
  );
/* */ 
/* */ 
  $items['admin/settings/coop_shift_scheduler/shiftAssignment'] = array(
    'title'            => 'Edit coop Shift Scheduler shiftAssignment',
    'page callback'    => 'coop_shift_scheduler_admin_shiftAssignment',
    'access arguments' => array('administer coop_shift_scheduler'),
    'type'             => MENU_NORMAL_ITEM,
  );
/* */
  $items['admin/settings/coop_shift_scheduler'] = array(
    'title'            => '*old*coop Shift Scheduler',
    'description'      => 'Administer the slots and default shifts on the shift schedule.',
    'access arguments' => array( 'administer coop_shift_scheduler'),
    'page callback'    => 'coop_shift_scheduler_admin_slots',
    'type'             => MENU_NORMAL_ITEM,
  );

  
  $items['admin/settings/coop_shift_scheduler/configure'] = array(
    'title'            => 'Configure coop Shift Scheduler',
    'page callback'    => 'coop_shift_scheduler_configure',
    'access arguments' => array('administer coop_shift_scheduler'),
    'type'             => MENU_NORMAL_ITEM,
  );
  $items['admin/settings/coop_shift_scheduler/default_shifts'] = array(
    'title'            => 'Edit default shifts',
    'page callback'    => 'coop_shift_scheduler_admin_default_shifts',
    'access arguments' => array('administer coop_shift_scheduler'),
    'type'             => MENU_CALLBACK,
  );
  return $items;
}
